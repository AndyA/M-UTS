// src/muts.a

rt.location("src/muts.a", 1);
rt.directive("TO", "m-uts.rom", rt.symbol("plain"));
rt.location("src/muts.a", 3);
rt.assign(rt.symbol("*"), 32768);
rt.location("src/muts.a", 5);
rt.directive("ADDR", rt.assign(rt.symbol("osfind"), 65486));
rt.location("src/muts.a", 6);
rt.directive("ADDR", rt.assign(rt.symbol("osgbpb"), 65489));
rt.location("src/muts.a", 7);
rt.directive("ADDR", rt.assign(rt.symbol("osbput"), 65492));
rt.location("src/muts.a", 8);
rt.directive("ADDR", rt.assign(rt.symbol("osbget"), 65495));
rt.location("src/muts.a", 9);
rt.directive("ADDR", rt.assign(rt.symbol("osargs"), 65498));
rt.location("src/muts.a", 10);
rt.directive("ADDR", rt.assign(rt.symbol("osfile"), 65501));
rt.location("src/muts.a", 11);
rt.directive("ADDR", rt.assign(rt.symbol("osrdch"), 65504));
rt.location("src/muts.a", 12);
rt.directive("ADDR", rt.assign(rt.symbol("osasci"), 65507));
rt.location("src/muts.a", 13);
rt.directive("ADDR", rt.assign(rt.symbol("osnewl"), 65511));
rt.location("src/muts.a", 14);
rt.directive("ADDR", rt.assign(rt.symbol("oswrch"), 65518));
rt.location("src/muts.a", 15);
rt.directive("ADDR", rt.assign(rt.symbol("osword"), 65521));
rt.location("src/muts.a", 16);
rt.directive("ADDR", rt.assign(rt.symbol("osbyte"), 65524));
rt.location("src/muts.a", 17);
rt.directive("ADDR", rt.assign(rt.symbol("oscli"), 65527));
rt.location("src/muts.a", 18);
rt.directive("ADDR", rt.assign(rt.symbol("irq2v"), 518));
rt.location("src/muts.a", 19);
rt.directive("ADDR", rt.assign(rt.symbol("irq1v"), 516));
rt.location("src/muts.a", 20);
rt.directive("ADDR", rt.assign(rt.symbol("brkv"), 514));
rt.location("src/muts.a", 21);
rt.directive("ADDR", rt.assign(rt.symbol("userv"), 512));
rt.location("src/muts.a", 22);
rt.directive("ADDR", rt.assign(rt.symbol("uptv"), 546));
rt.location("src/muts.a", 23);
rt.directive("ADDR", rt.assign(rt.symbol("evntv"), 544));
rt.location("src/muts.a", 24);
rt.directive("ADDR", rt.assign(rt.symbol("fscv"), 542));
rt.location("src/muts.a", 25);
rt.directive("ADDR", rt.assign(rt.symbol("findv"), 540));
rt.location("src/muts.a", 26);
rt.directive("ADDR", rt.assign(rt.symbol("gbpbv"), 538));
rt.location("src/muts.a", 27);
rt.directive("ADDR", rt.assign(rt.symbol("bputv"), 536));
rt.location("src/muts.a", 28);
rt.directive("ADDR", rt.assign(rt.symbol("bgetv"), 534));
rt.location("src/muts.a", 29);
rt.directive("ADDR", rt.assign(rt.symbol("argsv"), 532));
rt.location("src/muts.a", 30);
rt.directive("ADDR", rt.assign(rt.symbol("filev"), 530));
rt.location("src/muts.a", 31);
rt.directive("ADDR", rt.assign(rt.symbol("rdchv"), 528));
rt.location("src/muts.a", 32);
rt.directive("ADDR", rt.assign(rt.symbol("wrchv"), 526));
rt.location("src/muts.a", 33);
rt.directive("ADDR", rt.assign(rt.symbol("wordv"), 524));
rt.location("src/muts.a", 34);
rt.directive("ADDR", rt.assign(rt.symbol("bytev"), 522));
rt.location("src/muts.a", 35);
rt.directive("ADDR", rt.assign(rt.symbol("cliv"), 520));
rt.location("src/muts.a", 37);
rt.directive("ADDR", rt.assign(rt.symbol("ptr0"), 168));
rt.location("src/muts.a", 39);
rt.directive("ADDR", rt.assign(rt.symbol("acc0"), 170));
rt.location("src/muts.a", 40);
rt.directive("ADDR", rt.assign(rt.symbol("acc1"), 172));
rt.location("src/muts.a", 42);
rt.directive("ADDR", rt.assign(rt.symbol("cmd_offset"), 174));
rt.location("src/muts.a", 44);
rt.directive("ADDR", rt.assign(rt.symbol("cmdjmp"), 176));
rt.location("src/muts.a", 45);
rt.directive("ADDR", rt.assign(rt.symbol("cmdhelp"), 178));
rt.location("src/muts.a", 47);
rt.directive("ADDR", rt.assign(rt.symbol("acc2"), 180));
rt.location("src/muts.a", 48);
rt.directive("ADDR", rt.assign(rt.symbol("acc3"), 182));
rt.location("src/muts.a", 50);
rt.directive("ADDR", rt.assign(rt.symbol("hex_pfx"), 184));
rt.location("src/muts.a", 52);
rt.directive("ADDR", rt.assign(rt.symbol("cmdline"), 242));
rt.location("src/muts.a", 53);
rt.directive("ADDR", rt.assign(rt.symbol("cur_rom"), 244));
rt.location("src/muts.a", 54);
rt.directive("ADDR", rt.assign(rt.symbol("err"), 253));
rt.location("src/muts.a", 55);
rt.directive("ADDR", rt.assign(rt.symbol("esc_flag"), 255));
rt.location("src/muts.a", 57);
rt.directive("ADDR", rt.assign(rt.symbol("stack"), 256));
rt.location("src/muts.a", 59);
rt.directive("ADDR", rt.assign(rt.symbol("vars"), 768));
rt.location("src/muts.a", 61);
rt.directive("ADDR", rt.assign(rt.symbol("regs"), 1024));
rt.location("src/muts.a", 62);
rt.directive(
  "ADDR",
  rt.assign(
    rt.symbol("reg_a"),
    rt.f.add(
      rt.symbol("regs"),
      rt.f.mul(rt.f.sub(rt.chars("A"), rt.chars("A")), 2)
    )
  )
);
rt.location("src/muts.a", 63);
rt.directive(
  "ADDR",
  rt.assign(
    rt.symbol("reg_pc"),
    rt.f.add(
      rt.symbol("regs"),
      rt.f.mul(rt.f.sub(rt.chars("I"), rt.chars("A")), 2)
    )
  )
);
rt.location("src/muts.a", 64);
rt.directive(
  "ADDR",
  rt.assign(
    rt.symbol("reg_x"),
    rt.f.add(
      rt.symbol("regs"),
      rt.f.mul(rt.f.sub(rt.chars("X"), rt.chars("A")), 2)
    )
  )
);
rt.location("src/muts.a", 65);
rt.directive(
  "ADDR",
  rt.assign(
    rt.symbol("reg_y"),
    rt.f.add(
      rt.symbol("regs"),
      rt.f.mul(rt.f.sub(rt.chars("Y"), rt.chars("A")), 2)
    )
  )
);
rt.location("src/muts.a", 66);
rt.directive(
  "ADDR",
  rt.assign(
    rt.symbol("reg_p"),
    rt.f.add(
      rt.symbol("regs"),
      rt.f.mul(rt.f.sub(rt.chars("P"), rt.chars("A")), 2)
    )
  )
);
rt.location("src/muts.a", 67);
rt.directive(
  "ADDR",
  rt.assign(
    rt.symbol("reg_s"),
    rt.f.add(
      rt.symbol("regs"),
      rt.f.mul(rt.f.sub(rt.chars("S"), rt.chars("A")), 2)
    )
  )
);
rt.location("src/muts.a", 69);
rt.assign(rt.symbol("n_breakpoints"), 16);
rt.location("src/muts.a", 70);
rt.directive("ADDR", rt.assign(rt.symbol("breakpoints"), 1280));
rt.location("src/muts.a", 72);
rt.directive("ADDR", rt.assign(rt.symbol("base_addr"), 1536));
rt.location("src/muts.a", 73);
rt.directive("ADDR", rt.assign(rt.symbol("rom_sel"), 1538));
rt.location("src/muts.a", 74);
rt.directive("ADDR", rt.assign(rt.symbol("prompt"), 1539));
rt.location("src/muts.a", 76);
rt.assign(rt.symbol("cmd_line_len"), 160);
rt.location("src/muts.a", 77);
rt.directive("ADDR", rt.assign(rt.symbol("cmd_line"), 1792));
rt.location("src/muts.a", 79);
rt.directive(
  "ADDR",
  rt.assign(
    rt.symbol("brk_cmd"),
    rt.f.add(rt.symbol("cmd_line"), rt.symbol("cmd_line_len"))
  )
);
rt.location("src/muts.a", 81);
rt.directive("ADDR", rt.assign(rt.symbol("rom_private"), 3568));
rt.location("src/muts.a", 83);
rt.directive("ADDR", rt.assign(rt.symbol("x_present"), 40960));
rt.location("src/muts.a", 84);
rt.directive("ADDR", rt.assign(rt.symbol("x_assemble"), 40961));
rt.location("src/muts.a", 85);
rt.directive("ADDR", rt.assign(rt.symbol("x_eval"), 40964));
rt.location("src/muts.a", 87);
rt.assign(rt.symbol("key_left"), 136);
rt.location("src/muts.a", 88);
rt.assign(rt.symbol("key_right"), 137);
rt.location("src/muts.a", 89);
rt.assign(rt.symbol("key_down"), 138);
rt.location("src/muts.a", 90);
rt.assign(rt.symbol("key_up"), 139);
rt.location("src/muts.a", 92);
rt.assign(rt.symbol("key_sh_left"), 160);
rt.location("src/muts.a", 93);
rt.assign(rt.symbol("key_sh_right"), 161);
rt.location("src/muts.a", 94);
rt.assign(rt.symbol("key_sh_down"), 162);
rt.location("src/muts.a", 95);
rt.assign(rt.symbol("key_sh_up"), 163);
rt.location("src/muts.a", 97);
rt.assign(rt.symbol("case_mask"), 223);
rt.location("src/muts.a", 99);
rt.macroStart("inc16", rt.symbol("addr"));
rt.location("src/muts.a", 100);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.symbol("addr")));
rt.location("src/muts.a", 101);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 102);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("addr"), 1)));
rt.location("src/muts.a", 103);
rt.label(rt.symbol("+"));

rt.location("src/muts.a", 104);
rt.macroEnd();
rt.location("src/muts.a", 106);
// FIXME reproduces bug in original code

rt.location("src/muts.a", 107);
rt.macroStart("dec16bug", rt.symbol(".addr"));
rt.location("src/muts.a", 108);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".addr"), 1)));
rt.location("src/muts.a", 109);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 110);
rt.opcode("DEC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".addr"), 1)));
rt.location("src/muts.a", 111);
rt.label(rt.symbol("+"));
rt.opcode("DEC", rt.opArg(["abs", "zpg"], rt.symbol(".addr")));
rt.location("src/muts.a", 112);
rt.macroEnd();
rt.location("src/muts.a", 114);
rt.macroStart("dec16", rt.symbol(".addr"));
rt.location("src/muts.a", 115);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol(".addr")));
rt.location("src/muts.a", 116);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 117);
rt.opcode("DEC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".addr"), 1)));
rt.location("src/muts.a", 118);
rt.label(rt.symbol("+"));
rt.opcode("DEC", rt.opArg(["abs", "zpg"], rt.symbol(".addr")));
rt.location("src/muts.a", 119);
rt.macroEnd();
rt.location("src/muts.a", 121);
rt.macroStart("adc16", rt.symbol(".dst"), rt.symbol(".lhs"), rt.symbol(".rhs"));
rt.location("src/muts.a", 122);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol(".lhs")));
rt.location("src/muts.a", 123);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol(".rhs")));
rt.location("src/muts.a", 124);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol(".dst")));
rt.location("src/muts.a", 125);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".lhs"), 1)));
rt.location("src/muts.a", 126);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".rhs"), 1)));
rt.location("src/muts.a", 127);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".dst"), 1)));
rt.location("src/muts.a", 128);
rt.macroEnd();
rt.location("src/muts.a", 130);
rt.macroStart("sbc16", rt.symbol(".dst"), rt.symbol(".lhs"), rt.symbol(".rhs"));
rt.location("src/muts.a", 131);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol(".lhs")));
rt.location("src/muts.a", 132);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.symbol(".rhs")));
rt.location("src/muts.a", 133);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol(".dst")));
rt.location("src/muts.a", 134);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".lhs"), 1)));
rt.location("src/muts.a", 135);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".rhs"), 1)));
rt.location("src/muts.a", 136);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".dst"), 1)));
rt.location("src/muts.a", 137);
rt.macroEnd();
rt.location("src/muts.a", 139);
rt.macroStart("cmp16", rt.symbol(".lhs"), rt.symbol(".rhs"));
rt.location("src/muts.a", 140);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol(".lhs")));
rt.location("src/muts.a", 141);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.symbol(".rhs")));
rt.location("src/muts.a", 142);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".lhs"), 1)));
rt.location("src/muts.a", 143);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".rhs"), 1)));
rt.location("src/muts.a", 144);
rt.macroEnd();
rt.location("src/muts.a", 146);
rt.macroStart("cmz16", rt.symbol(".reg"));
rt.location("src/muts.a", 147);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol(".reg")));
rt.location("src/muts.a", 148);
rt.opcode("ORA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".reg"), 1)));
rt.location("src/muts.a", 149);
rt.macroEnd();
rt.location("src/muts.a", 151);
rt.macroStart("mov16", rt.symbol(".dst"), rt.symbol(".src"));
rt.location("src/muts.a", 152);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol(".src")));
rt.location("src/muts.a", 153);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol(".dst")));
rt.location("src/muts.a", 154);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".src"), 1)));
rt.location("src/muts.a", 155);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".dst"), 1)));
rt.location("src/muts.a", 156);
rt.macroEnd();
rt.location("src/muts.a", 158);
rt.macroStart("mov16i", rt.symbol(".dst"), rt.symbol(".addr"));
rt.location("src/muts.a", 159);
rt.opcode("LDA", rt.opArg(["#"], rt.f.lo(rt.symbol(".addr"))));
rt.location("src/muts.a", 160);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol(".dst")));
rt.location("src/muts.a", 161);
rt.opcode("LDA", rt.opArg(["#"], rt.f.hi(rt.symbol(".addr"))));
rt.location("src/muts.a", 162);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".dst"), 1)));
rt.location("src/muts.a", 163);
rt.macroEnd();
rt.location("src/muts.a", 165);
rt.macroStart("mov16z", rt.symbol(".dst"));
rt.location("src/muts.a", 166);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 167);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol(".dst")));
rt.location("src/muts.a", 168);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".dst"), 1)));
rt.location("src/muts.a", 169);
rt.macroEnd();
rt.location("src/muts.a", 171);
rt.macroStart("stxy", rt.symbol(".dst"));
rt.location("src/muts.a", 172);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol(".dst")));
rt.location("src/muts.a", 173);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".dst"), 1)));
rt.location("src/muts.a", 174);
rt.macroEnd();
rt.location("src/muts.a", 176);
// Add A to 16 bit reg

rt.location("src/muts.a", 177);
rt.macroStart("adca16", rt.symbol(".dst"));
rt.location("src/muts.a", 178);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol(".dst")));
rt.location("src/muts.a", 179);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol(".dst")));
rt.location("src/muts.a", 180);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 181);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".dst"), 1)));
rt.location("src/muts.a", 182);
rt.label(rt.symbol("+"));

rt.location("src/muts.a", 183);
rt.macroEnd();
rt.location("src/muts.a", 185);
rt.macroStart("asl16", rt.symbol(".reg"));
rt.location("src/muts.a", 186);
rt.opcode("ASL", rt.opArg(["abs", "zpg"], rt.symbol(".reg")));
rt.location("src/muts.a", 187);
rt.opcode("ROL", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".reg"), 1)));
rt.location("src/muts.a", 188);
rt.macroEnd();
rt.location("src/muts.a", 190);
rt.macroStart("rol16", rt.symbol(".reg"));
rt.location("src/muts.a", 191);
rt.opcode("ROL", rt.opArg(["abs", "zpg"], rt.symbol(".reg")));
rt.location("src/muts.a", 192);
rt.opcode("ROL", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".reg"), 1)));
rt.location("src/muts.a", 193);
rt.macroEnd();
rt.location("src/muts.a", 195);
rt.macroStart("push16", rt.symbol(".addr"));
rt.location("src/muts.a", 196);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol(".addr")));
rt.location("src/muts.a", 197);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 198);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".addr"), 1)));
rt.location("src/muts.a", 199);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 200);
rt.macroEnd();
rt.location("src/muts.a", 202);
rt.macroStart("pop16", rt.symbol(".addr"));
rt.location("src/muts.a", 203);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 204);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol(".addr"), 1)));
rt.location("src/muts.a", 205);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 206);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol(".addr")));
rt.location("src/muts.a", 207);
rt.macroEnd();
rt.location("src/muts.a", 209);
// For assembler tables

rt.location("src/muts.a", 211);
rt.macroStart(
  "mnem",
  rt.symbol(".c1"),
  rt.symbol(".c2"),
  rt.symbol(".c3"),
  rt.symbol(".bits"),
  rt.symbol(".mask")
);
rt.location("src/muts.a", 212);
rt.directive(
  "SET",
  rt.assign(
    rt.symbol(".cc"),
    rt.f.or(
      rt.f.or(
        rt.f.lsl(rt.f.sub(rt.symbol(".c1"), 63), 11),
        rt.f.lsl(rt.f.sub(rt.symbol(".c2"), 63), 6)
      ),
      rt.f.lsl(rt.f.sub(rt.symbol(".c3"), 63), 1)
    )
  )
);
rt.location("src/muts.a", 213);
rt.directive(
  "BYTE",
  rt.f.lo(rt.symbol(".cc")),
  rt.f.hi(rt.symbol(".cc")),
  rt.symbol(".bits"),
  rt.symbol(".mask")
);
rt.location("src/muts.a", 214);
rt.macroEnd();
rt.location("src/muts.a", 216);
rt.macroStart(
  "ilen4",
  rt.symbol(".l0"),
  rt.symbol(".l1"),
  rt.symbol(".l2"),
  rt.symbol(".l3")
);
rt.location("src/muts.a", 217);
rt.directive(
  "BYTE",
  rt.f.or(
    rt.f.or(
      rt.f.or(rt.f.lsl(rt.symbol(".l0"), 6), rt.f.lsl(rt.symbol(".l1"), 4)),
      rt.f.lsl(rt.symbol(".l2"), 2)
    ),
    rt.f.lsl(rt.symbol(".l3"), 0)
  )
);
rt.location("src/muts.a", 218);
rt.macroEnd();
rt.location("src/muts.a", 220);
rt.macroStart(
  "ilen",
  rt.symbol(".l0"),
  rt.symbol(".l1"),
  rt.symbol(".l2"),
  rt.symbol(".l3"),
  rt.symbol(".l4"),
  rt.symbol(".l5"),
  rt.symbol(".l6"),
  rt.symbol(".l7"),
  rt.symbol(".l8"),
  rt.symbol(".l9"),
  rt.symbol(".l10"),
  rt.symbol(".l11"),
  rt.symbol(".l12"),
  rt.symbol(".l13"),
  rt.symbol(".l14"),
  rt.symbol(".l15")
);
rt.location("src/muts.a", 221);
rt.macroCall(
  "ILEN4",
  rt.symbol(".l0"),
  rt.symbol(".l1"),
  rt.symbol(".l2"),
  rt.symbol(".l3")
);
rt.location("src/muts.a", 222);
rt.macroCall(
  "ILEN4",
  rt.symbol(".l4"),
  rt.symbol(".l5"),
  rt.symbol(".l6"),
  rt.symbol(".l7")
);
rt.location("src/muts.a", 223);
rt.macroCall(
  "ILEN4",
  rt.symbol(".l8"),
  rt.symbol(".l9"),
  rt.symbol(".l10"),
  rt.symbol(".l11")
);
rt.location("src/muts.a", 224);
rt.macroCall(
  "ILEN4",
  rt.symbol(".l12"),
  rt.symbol(".l13"),
  rt.symbol(".l14"),
  rt.symbol(".l15")
);
rt.location("src/muts.a", 225);
rt.macroEnd();
rt.location("src/muts.a", 227);
rt.label(rt.symbol("rom_language"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("language")));
rt.location("src/muts.a", 228);
rt.label(rt.symbol("rom_service"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("service")));
rt.location("src/muts.a", 230);
// ROM type

rt.location("src/muts.a", 231);
rt.label(rt.symbol("rom_type"));
rt.directive("BYTE", 194);
rt.location("src/muts.a", 232);
// Copyright offset. Points to 0 before copyright

rt.location("src/muts.a", 233);
rt.label(rt.symbol("copyright_offset"));
rt.directive(
  "BYTE",
  rt.f.sub(rt.f.sub(rt.symbol("copyright"), rt.symbol("rom_language")), 1)
);
rt.location("src/muts.a", 234);
// Version

rt.location("src/muts.a", 235);
rt.directive("BYTE", 2);
rt.location("src/muts.a", 236);
rt.label(rt.symbol("title"));
rt.directive("TEXT", "M-UTS", 0);
rt.location("src/muts.a", 237);
rt.label(rt.symbol("version"));
rt.directive("TEXT", "1.60", 0);
rt.location("src/muts.a", 238);
rt.label(rt.symbol("copyright"));
rt.directive("TEXT", "(C) AIAA 1984", 0);
rt.location("src/muts.a", 240);
// Jump table to expose well known addresses to optional upper half of ROM

rt.location("src/muts.a", 242);
rt.label(rt.symbol("j_prstr"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 243);
rt.label(rt.symbol("j_throw"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 244);
rt.label(rt.symbol("j_newline"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 245);
rt.label(rt.symbol("j_check_escape"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("check_escape")));
rt.location("src/muts.a", 246);
rt.label(rt.symbol("j_hexbyte"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 247);
rt.label(rt.symbol("j_hexbyte_space"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 248);
rt.label(rt.symbol("j_radix_out"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("radix_out")));
rt.location("src/muts.a", 249);
rt.label(rt.symbol("j_getch"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 250);
rt.label(rt.symbol("j_skip_space"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 251);
rt.label(rt.symbol("j_eval"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 252);
rt.label(rt.symbol("j_eval_byte"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("eval_byte")));
rt.location("src/muts.a", 253);
rt.label(rt.symbol("j_check_eol"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 254);
rt.label(rt.symbol("j_parse_bytestring"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("parse_bytes")));
rt.location("src/muts.a", 255);
rt.label(rt.symbol("j_try_poke"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("try_poke")));
rt.location("src/muts.a", 256);
rt.label(rt.symbol("j_acc0_to_tmp0"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("acc0_to_acc2")));
rt.location("src/muts.a", 257);
rt.label(rt.symbol("j_unget"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 258);
rt.label(rt.symbol("j_x0"));
rt.opcode("JMP", rt.opArg(["abs"], 0));
rt.location("src/muts.a", 259);
rt.label(rt.symbol("j_x1"));
rt.opcode("JMP", rt.opArg(["abs"], 0));
rt.location("src/muts.a", 261);
// Command lookup table. Each entry is the command name with the top bit of

rt.location("src/muts.a", 262);
// the last char set followed by abs pointers to the code and help text for

rt.location("src/muts.a", 263);
// that command.

rt.location("src/muts.a", 265);
rt.directive("SET", rt.assign(rt.symbol("next_token"), 128));
rt.location("src/muts.a", 267);
rt.macroStart("cmd", rt.ref(rt.symbol(".token")));
rt.location("src/muts.a", 268);
rt.assign(rt.symbol(".token"), rt.symbol("next_token"));
rt.location("src/muts.a", 269);
rt.directive(
  "SET",
  rt.assign(rt.symbol("next_token"), rt.f.add(rt.symbol("next_token"), 1))
);
rt.location("src/muts.a", 270);
rt.macroEnd();
rt.location("src/muts.a", 272);
rt.label(rt.symbol("cmd_table"));
rt.macroCall("CMD", rt.ref(rt.symbol("tok_assemble")));
rt.location("src/muts.a", 273);
rt.directive("TEXT", "ASSEMBL", rt.f.add(rt.chars("E"), 128));
rt.location("src/muts.a", 274);
rt.directive("WORD", rt.symbol("c_assemble"), rt.symbol("h_assemble"));
rt.location("src/muts.a", 276);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_base")));
rt.location("src/muts.a", 277);
rt.directive("TEXT", "BAS", rt.f.add(rt.chars("E"), 128));
rt.location("src/muts.a", 278);
rt.directive("WORD", rt.symbol("c_base"), rt.symbol("h_base"));
rt.location("src/muts.a", 280);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_calc")));
rt.location("src/muts.a", 281);
rt.directive("TEXT", "CAL", rt.f.add(rt.chars("C"), 128));
rt.location("src/muts.a", 282);
rt.directive("WORD", rt.symbol("c_calc"), rt.symbol("h_calc"));
rt.location("src/muts.a", 284);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_change")));
rt.location("src/muts.a", 285);
rt.directive("TEXT", "CHANG", rt.f.add(rt.chars("E"), 128));
rt.location("src/muts.a", 286);
rt.directive("WORD", rt.symbol("c_change"), rt.symbol("h_change"));
rt.location("src/muts.a", 288);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_clr")));
rt.location("src/muts.a", 289);
rt.directive("TEXT", "CL", rt.f.add(rt.chars("R"), 128));
rt.location("src/muts.a", 290);
rt.directive("WORD", rt.symbol("c_clr"), rt.symbol("h_clr"));
rt.location("src/muts.a", 292);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_dis")));
rt.location("src/muts.a", 293);
rt.directive("TEXT", "DI", rt.f.add(rt.chars("S"), 128));
rt.location("src/muts.a", 294);
rt.directive("WORD", rt.symbol("c_dis"), rt.symbol("h_dis"));
rt.location("src/muts.a", 296);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_edit")));
rt.location("src/muts.a", 297);
rt.directive("TEXT", "EDI", rt.f.add(rt.chars("T"), 128));
rt.location("src/muts.a", 298);
rt.directive("WORD", rt.symbol("c_edit"), rt.symbol("h_edit"));
rt.location("src/muts.a", 300);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_flist")));
rt.location("src/muts.a", 301);
rt.directive("TEXT", "FLIS", rt.f.add(rt.chars("T"), 128));
rt.location("src/muts.a", 302);
rt.directive("WORD", rt.symbol("c_flist"), rt.symbol("h_flist"));
rt.location("src/muts.a", 304);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_form")));
rt.location("src/muts.a", 305);
rt.directive("TEXT", "FOR", rt.f.add(rt.chars("M"), 128));
rt.location("src/muts.a", 306);
rt.directive("WORD", rt.symbol("c_form"), rt.symbol("h_form"));
rt.location("src/muts.a", 308);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_find")));
rt.location("src/muts.a", 309);
rt.directive("TEXT", "FIN", rt.f.add(rt.chars("D"), 128));
rt.location("src/muts.a", 310);
rt.directive("WORD", rt.symbol("c_find"), rt.symbol("h_find"));
rt.location("src/muts.a", 312);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_get")));
rt.location("src/muts.a", 313);
rt.directive("TEXT", "GE", rt.f.add(rt.chars("T"), 128));
rt.location("src/muts.a", 314);
rt.directive("WORD", rt.symbol("c_get"), rt.symbol("h_get"));
rt.location("src/muts.a", 316);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_go")));
rt.location("src/muts.a", 317);
rt.directive("TEXT", "G", rt.f.add(rt.chars("O"), 128));
rt.location("src/muts.a", 318);
rt.directive("WORD", rt.symbol("c_go"), rt.symbol("h_go"));
rt.location("src/muts.a", 320);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_look")));
rt.location("src/muts.a", 321);
rt.directive("TEXT", "LOO", rt.f.add(rt.chars("K"), 128));
rt.location("src/muts.a", 322);
rt.directive("WORD", rt.symbol("c_look"), rt.symbol("h_look"));
rt.location("src/muts.a", 324);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_mem")));
rt.location("src/muts.a", 325);
rt.directive("TEXT", "ME", rt.f.add(rt.chars("M"), 128));
rt.location("src/muts.a", 326);
rt.directive("WORD", rt.symbol("c_mem"), rt.symbol("h_mem"));
rt.location("src/muts.a", 328);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_mode")));
rt.location("src/muts.a", 329);
rt.directive("TEXT", "MOD", rt.f.add(rt.chars("E"), 128));
rt.location("src/muts.a", 330);
rt.directive("WORD", rt.symbol("c_mode"), rt.symbol("h_mode"));
rt.location("src/muts.a", 332);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_monitor")));
rt.location("src/muts.a", 333);
rt.directive("TEXT", "MONITO", rt.f.add(rt.chars("R"), 128));
rt.location("src/muts.a", 334);
rt.directive("WORD", rt.symbol("c_monitor"), rt.symbol("h_monitor"));
rt.location("src/muts.a", 336);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_move")));
rt.location("src/muts.a", 337);
rt.directive("TEXT", "MOV", rt.f.add(rt.chars("E"), 128));
rt.location("src/muts.a", 338);
rt.directive("WORD", rt.symbol("c_move"), rt.symbol("h_move"));
rt.location("src/muts.a", 340);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_onbrk")));
rt.location("src/muts.a", 341);
rt.directive("TEXT", "ONBR", rt.f.add(rt.chars("K"), 128));
rt.location("src/muts.a", 342);
rt.directive("WORD", rt.symbol("c_onbrk"), rt.symbol("h_onbrk"));
rt.location("src/muts.a", 344);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_put")));
rt.location("src/muts.a", 345);
rt.directive("TEXT", "PU", rt.f.add(rt.chars("T"), 128));
rt.location("src/muts.a", 346);
rt.directive("WORD", rt.symbol("c_put"), rt.symbol("h_put"));
rt.location("src/muts.a", 348);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_regs")));
rt.location("src/muts.a", 349);
rt.directive("TEXT", "REG", rt.f.add(rt.chars("S"), 128));
rt.location("src/muts.a", 350);
rt.directive("WORD", rt.symbol("c_regs"), rt.symbol("h_regs"));
rt.location("src/muts.a", 352);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_same")));
rt.location("src/muts.a", 353);
rt.directive("TEXT", "SAM", rt.f.add(rt.chars("E"), 128));
rt.location("src/muts.a", 354);
rt.directive("WORD", rt.symbol("c_same"), rt.symbol("h_same"));
rt.location("src/muts.a", 356);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_select")));
rt.location("src/muts.a", 357);
rt.directive("TEXT", "SELEC", rt.f.add(rt.chars("T"), 128));
rt.location("src/muts.a", 358);
rt.directive("WORD", rt.symbol("c_select"), rt.symbol("h_select"));
rt.location("src/muts.a", 360);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_set")));
rt.location("src/muts.a", 361);
rt.directive("TEXT", "SE", rt.f.add(rt.chars("T"), 128));
rt.location("src/muts.a", 362);
rt.directive("WORD", rt.symbol("c_set"), rt.symbol("h_set"));
rt.location("src/muts.a", 364);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_step")));
rt.location("src/muts.a", 365);
rt.directive("TEXT", "STE", rt.f.add(rt.chars("P"), 128));
rt.location("src/muts.a", 366);
rt.directive("WORD", rt.symbol("c_step"), rt.symbol("h_step"));
rt.location("src/muts.a", 368);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_vdu")));
rt.location("src/muts.a", 369);
rt.directive("TEXT", "VD", rt.f.add(rt.chars("U"), 128));
rt.location("src/muts.a", 370);
rt.directive("WORD", rt.symbol("c_vdu"), rt.symbol("h_vdu"));
rt.location("src/muts.a", 372);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_verify")));
rt.location("src/muts.a", 373);
rt.directive("TEXT", "VERIF", rt.f.add(rt.chars("Y"), 128));
rt.location("src/muts.a", 374);
rt.directive("WORD", rt.symbol("c_verify"), rt.symbol("h_verify"));
rt.location("src/muts.a", 376);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_where")));
rt.location("src/muts.a", 377);
rt.directive("TEXT", "WHER", rt.f.add(rt.chars("E"), 128));
rt.location("src/muts.a", 378);
rt.directive("WORD", rt.symbol("c_where"), rt.symbol("h_where"));
rt.location("src/muts.a", 380);
// The command table is also used for operator names

rt.location("src/muts.a", 382);
// AND

rt.location("src/muts.a", 383);
rt.label(rt.symbol("op_and"));
rt.macroCall("CMD", rt.ref(rt.symbol("tok_and")));
rt.location("src/muts.a", 384);
rt.directive("TEXT", "AN", rt.f.add(rt.chars("D"), 128));
rt.location("src/muts.a", 385);
rt.directive("WORD", 0, 0);
rt.location("src/muts.a", 387);
// OR

rt.location("src/muts.a", 388);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_or")));
rt.location("src/muts.a", 389);
rt.directive("TEXT", "O", rt.f.add(rt.chars("R"), 128));
rt.location("src/muts.a", 390);
rt.directive("WORD", 0, 0);
rt.location("src/muts.a", 392);
// EOR

rt.location("src/muts.a", 393);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_eor")));
rt.location("src/muts.a", 394);
rt.directive("TEXT", "EO", rt.f.add(rt.chars("R"), 128));
rt.location("src/muts.a", 395);
rt.directive("WORD", 0, 0);
rt.location("src/muts.a", 397);
// NOT

rt.location("src/muts.a", 398);
rt.macroCall("CMD", rt.ref(rt.symbol("tok_not")));
rt.location("src/muts.a", 399);
rt.directive("TEXT", "NO", rt.f.add(rt.chars("T"), 128));
rt.location("src/muts.a", 400);
rt.directive("WORD", 0, 0);
rt.location("src/muts.a", 401);
rt.directive("TEXT", 0);
rt.location("src/muts.a", 403);
// Help text per command. Top bit of last char of each entry is set

rt.location("src/muts.a", 405);
rt.label(rt.symbol("help_table"));

rt.location("src/muts.a", 406);
rt.label(rt.symbol("h_assemble"));
rt.directive("TEXT", "<fsp> <fsp", rt.f.add(rt.chars(">"), 128));
rt.location("src/muts.a", 407);
rt.label(rt.symbol("h_base"));
rt.directive("TEXT", "<addr", rt.f.add(rt.chars(">"), 128));
rt.location("src/muts.a", 408);
rt.label(rt.symbol("h_calc"));
rt.directive("TEXT", "<expr", rt.f.add(rt.chars(">"), 128));
rt.location("src/muts.a", 409);
rt.label(rt.symbol("h_change"));
rt.directive("TEXT", "<addr> <byte string", rt.f.add(rt.chars(">"), 128));
rt.location("src/muts.a", 410);
rt.label(rt.symbol("h_clr"));
rt.directive("TEXT", "(<addr>", rt.f.add(rt.chars(")"), 128));
rt.location("src/muts.a", 411);
rt.label(rt.symbol("h_dis"));
rt.directive(
  "TEXT",
  "<strt>(..<end>) (H<prefix>) (P,L",
  rt.f.add(rt.chars(")"), 128)
);
rt.location("src/muts.a", 412);
rt.label(rt.symbol("h_edit"));
rt.directive("TEXT", "<addr", rt.f.add(rt.chars(">"), 128));
rt.location("src/muts.a", 413);
rt.label(rt.symbol("h_flist"));
rt.directive("TEXT", "(<number>", rt.f.add(rt.chars(")"), 128));
rt.location("src/muts.a", 414);
rt.label(rt.symbol("h_form"));
rt.directive("TEXT", "<tracks> (<drv>", rt.f.add(rt.chars(")"), 128));
rt.location("src/muts.a", 415);
rt.label(rt.symbol("h_find"));
rt.directive(
  "TEXT",
  "<strt>(..<end>) <byte string",
  rt.f.add(rt.chars(">"), 128)
);
rt.location("src/muts.a", 416);
rt.label(rt.symbol("h_get"));
rt.directive("TEXT", "<track> (<drv>", rt.f.add(rt.chars(")"), 128));
rt.location("src/muts.a", 417);
rt.label(rt.symbol("h_go"));
rt.directive("TEXT", "<addr> (<A>) (<X>) (<Y>", rt.f.add(rt.chars(")"), 128));
rt.location("src/muts.a", 418);
rt.label(rt.symbol("h_look"));
rt.directive("TEXT", "<addr> (H<prefix>", rt.f.add(rt.chars(")"), 128));
rt.location("src/muts.a", 419);
rt.label(rt.symbol("h_mem"));
rt.directive("TEXT", "<strt>(..<end>) (P,L", rt.f.add(rt.chars(")"), 128));
rt.location("src/muts.a", 420);
rt.label(rt.symbol("h_mode"));
rt.directive("TEXT", "<mode", rt.f.add(rt.chars(">"), 128));
rt.location("src/muts.a", 421);
rt.label(rt.symbol("h_monitor"));
rt.directive("TEXT", rt.f.add(rt.chars(" "), 128));
rt.location("src/muts.a", 422);
rt.label(rt.symbol("h_move"));
rt.directive(
  "TEXT",
  "(>) <src> <dest> <len> (<addr>",
  rt.f.add(rt.chars(")"), 128)
);
rt.location("src/muts.a", 423);
rt.label(rt.symbol("h_onbrk"));
rt.directive("TEXT", "<command line", rt.f.add(rt.chars(">"), 128));
rt.location("src/muts.a", 424);
rt.label(rt.symbol("h_put"));
rt.directive("TEXT", "<track> (<drv>", rt.f.add(rt.chars(")"), 128));
rt.location("src/muts.a", 425);
rt.label(rt.symbol("h_regs"));
rt.directive("TEXT", rt.f.add(rt.chars(" "), 128));
rt.location("src/muts.a", 426);
rt.label(rt.symbol("h_same"));
rt.directive("TEXT", "<addr> <addr> <len", rt.f.add(rt.chars(">"), 128));
rt.location("src/muts.a", 427);
rt.label(rt.symbol("h_select"));
rt.directive("TEXT", "<rom number", rt.f.add(rt.chars(">"), 128));
rt.location("src/muts.a", 428);
rt.label(rt.symbol("h_set"));
rt.directive("TEXT", "<addr", rt.f.add(rt.chars(">"), 128));
rt.location("src/muts.a", 429);
rt.label(rt.symbol("h_step"));
rt.directive("TEXT", "<addr> (H<prefix>) (P,L", rt.f.add(rt.chars(")"), 128));
rt.location("src/muts.a", 430);
rt.label(rt.symbol("h_vdu"));
rt.directive("TEXT", "<byte string", rt.f.add(rt.chars(">"), 128));
rt.location("src/muts.a", 431);
rt.label(rt.symbol("h_verify"));
rt.directive("TEXT", "(<drv>", rt.f.add(rt.chars(")"), 128));
rt.location("src/muts.a", 432);
rt.label(rt.symbol("h_where"));
rt.directive("TEXT", rt.f.add(rt.chars(" "), 128));
rt.location("src/muts.a", 433);
rt.directive("TEXT", 0);
rt.location("src/muts.a", 435);
// The ASSEMBLE command checks the upper half of the ROM for a possible

rt.location("src/muts.a", 436);
// assembler implementation

rt.location("src/muts.a", 438);
rt.label(rt.symbol("c_assemble"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("x_present")));
rt.location("src/muts.a", 439);
rt.opcode("CMP", rt.opArg(["#"], 255));
rt.location("src/muts.a", 440);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("throw_noasm")));
rt.location("src/muts.a", 441);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("x_assemble")));
rt.location("src/muts.a", 443);
rt.label(rt.symbol("throw_noasm"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 444);
rt.directive("TEXT", 160, "No assembler", 0);
rt.location("src/muts.a", 446);
// Attempt to execute a command

rt.location("src/muts.a", 448);
rt.label(rt.symbol("dispatch_cmd"));
rt.macroCall("PUSH16", rt.symbol("cmdline"));
rt.location("src/muts.a", 449);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("lookup_command")));
rt.location("src/muts.a", 450);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("dispatch_done")));
rt.location("src/muts.a", 451);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 452);
rt.opcode("AND", rt.opArg(["#"], rt.symbol("case_mask")));
rt.location("src/muts.a", 453);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("A")));
rt.location("src/muts.a", 454);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 455);
rt.opcode("CMP", rt.opArg(["#"], rt.f.add(rt.chars("Z"), 1)));
rt.location("src/muts.a", 456);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 457);
rt.label(rt.symbol("dispatch_done"));
rt.macroCall("POP16", rt.symbol("cmdline"));
rt.location("src/muts.a", 458);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 459);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 461);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 462);
rt.macroCall("CMZ16", rt.symbol("cmdjmp"));
rt.location("src/muts.a", 463);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("dispatch_done")));
rt.location("src/muts.a", 464);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 465);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 466);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("call_cmd")));
rt.location("src/muts.a", 467);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 468);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 470);
rt.label(rt.symbol("call_cmd"));
rt.opcode("JMP", rt.opArg(["(ind)"], rt.symbol("cmdjmp")));
rt.location("src/muts.a", 472);
// Print M-UTS with version

rt.location("src/muts.a", 474);
rt.label(rt.symbol("pr_muts"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 475);
rt.directive("TEXT", "M-UTS 1.60", 13, 0);
rt.location("src/muts.a", 476);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 478);
// Print a banner

rt.location("src/muts.a", 480);
rt.label(rt.symbol("pr_banner"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 481);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("pr_muts")));
rt.location("src/muts.a", 482);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 483);
rt.directive("TEXT", rt.f.neg(2), "MONITOR", 13, 0);
rt.location("src/muts.a", 484);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 486);
// Output a character counting it in acc2

rt.location("src/muts.a", 488);
rt.label(rt.symbol("oswrch_counted"));
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 489);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 491);
rt.label(rt.symbol("show_help"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 492);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("pr_muts")));
rt.location("src/muts.a", 493);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 494);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 495);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 496);
rt.macroCall("MOV16I", rt.symbol("acc0"), rt.symbol("help_table"));
rt.location("src/muts.a", 497);
rt.label(rt.symbol("--"));
rt.opcode("LDA", rt.opArg(["#"], 2));
rt.location("src/muts.a", 498);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 499);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 500);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 501);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 502);
rt.directive("TEXT", rt.f.neg(2), 0);
rt.location("src/muts.a", 503);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 504);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 505);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,Y"], rt.symbol("cmd_table")));
rt.location("src/muts.a", 506);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 507);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 508);
rt.opcode("AND", rt.opArg(["#"], 127));
rt.location("src/muts.a", 509);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch_counted")));
rt.location("src/muts.a", 510);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 511);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 512);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 513);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 514);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 515);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 516);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 517);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch_counted")));
rt.location("src/muts.a", 518);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["(zpg,X)"], rt.symbol("acc0")));
rt.location("src/muts.a", 519);
rt.macroCall("INC16", rt.symbol("acc0"));
rt.location("src/muts.a", 520);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 521);
rt.opcode("AND", rt.opArg(["#"], 127));
rt.location("src/muts.a", 522);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch_counted")));
rt.location("src/muts.a", 523);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 524);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 525);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_escape")));
rt.location("src/muts.a", 526);
// pad with spaces to 40 cols

rt.location("src/muts.a", 527);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 528);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 529);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch_counted")));
rt.location("src/muts.a", 530);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 531);
rt.opcode("CPX", rt.opArg(["#"], 40));
rt.location("src/muts.a", 532);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 533);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 534);
rt.opcode("LDA", rt.opArg(["(zpg,X)"], rt.symbol("acc0")));
rt.location("src/muts.a", 535);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("--")));
rt.location("src/muts.a", 536);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 538);
rt.label(rt.symbol("prstr"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 539);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 540);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 541);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 542);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 543);
rt.label(rt.symbol("-"));
rt.macroCall("INC16", rt.symbol("ptr0"));
rt.location("src/muts.a", 544);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("ptr0")));
rt.location("src/muts.a", 545);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 546);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 547);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 548);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 549);
rt.label(rt.symbol("--"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 550);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 551);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("--")));
rt.location("src/muts.a", 552);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 553);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osasci")));
rt.location("src/muts.a", 554);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 555);
rt.label(rt.symbol("++"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 556);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 557);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 558);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 559);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 561);
rt.label(rt.symbol("throw"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("reset_terminal")));
rt.location("src/muts.a", 562);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 563);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 564);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 565);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 566);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 567);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 568);
rt.label(rt.symbol("-"));
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 569);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("ptr0")));
rt.location("src/muts.a", 570);
rt.opcode("STA", rt.opArg(["abs,Y"], rt.symbol("stack")));
rt.location("src/muts.a", 571);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 572);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("stack")));
rt.location("src/muts.a", 574);
rt.label(rt.symbol("newline"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osnewl")));
rt.location("src/muts.a", 575);
rt.label(rt.symbol("check_escape"));
rt.opcode("BIT", rt.opArg(["abs", "zpg"], rt.symbol("esc_flag")));
rt.location("src/muts.a", 576);
rt.opcode("BMI", rt.opArg(["rel"], rt.symbol("throw_escape")));
rt.location("src/muts.a", 577);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 579);
rt.label(rt.symbol("throw_escape"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 580);
rt.directive("TEXT", 17, "Escape", 0);
rt.location("src/muts.a", 582);
rt.label(rt.symbol("hexbyte"));
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 583);
rt.opcode("ROR");
rt.location("src/muts.a", 584);
rt.opcode("ROR");
rt.location("src/muts.a", 585);
rt.opcode("ROR");
rt.location("src/muts.a", 586);
rt.opcode("ROR");
rt.location("src/muts.a", 587);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexnybble")));
rt.location("src/muts.a", 588);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 589);
rt.label(rt.symbol("hexnybble"));
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 590);
rt.opcode("AND", rt.opArg(["#"], 15));
rt.location("src/muts.a", 591);
rt.opcode("CMP", rt.opArg(["#"], 10));
rt.location("src/muts.a", 592);
rt.opcode("SED", rt.opArg(["impl"]));
rt.location("src/muts.a", 593);
rt.opcode("ADC", rt.opArg(["#"], rt.chars("0")));
rt.location("src/muts.a", 594);
rt.opcode("CLD", rt.opArg(["impl"]));
rt.location("src/muts.a", 595);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 596);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 597);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 599);
rt.label(rt.symbol("hexbyte_space"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 600);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 601);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 602);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 604);
rt.label(rt.symbol("radix_out"));
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 605);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 606);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 607);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 608);
rt.opcode("LDY", rt.opArg(["#"], 16));
rt.location("src/muts.a", 609);
rt.label(rt.symbol("--"));
rt.macroCall("ASL16", rt.symbol("acc0"));
rt.location("src/muts.a", 610);
rt.opcode("ROL");
rt.location("src/muts.a", 611);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 612);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 613);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 614);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 615);
rt.label(rt.symbol("+"));
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 616);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("--")));
rt.location("src/muts.a", 617);
rt.opcode("CMP", rt.opArg(["#"], 10));
rt.location("src/muts.a", 618);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 619);
rt.opcode(
  "ADC",
  rt.opArg(["#"], rt.f.sub(rt.f.sub(rt.chars("A"), rt.chars("9")), 2))
);
rt.location("src/muts.a", 620);
rt.label(rt.symbol("+"));
rt.opcode("ADC", rt.opArg(["#"], rt.chars("0")));
rt.location("src/muts.a", 621);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 622);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 623);
rt.macroCall("CMZ16", rt.symbol("acc0"));
rt.location("src/muts.a", 624);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 625);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 626);
rt.label(rt.symbol("-"));
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 627);
rt.opcode("BMI", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 628);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 629);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 630);
rt.label(rt.symbol("+"));

rt.location("src/muts.a", 631);
rt.label(rt.symbol("-"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 632);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 633);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 634);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 636);
rt.label(rt.symbol("getch"));
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 637);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("cmdline")));
rt.location("src/muts.a", 638);
rt.macroCall("INC16", rt.symbol("cmdline"));
rt.location("src/muts.a", 639);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 641);
rt.label(rt.symbol("skip_space"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 642);
rt.opcode("CMP", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 643);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("skip_space")));
rt.location("src/muts.a", 644);
rt.opcode("CMP", rt.opArg(["#"], 13));
rt.location("src/muts.a", 645);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 647);
rt.label(rt.symbol("to_upper"));
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 648);
rt.opcode("AND", rt.opArg(["#"], rt.symbol("case_mask")));
rt.location("src/muts.a", 649);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("A")));
rt.location("src/muts.a", 650);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 651);
rt.opcode("CMP", rt.opArg(["#"], rt.f.add(rt.chars("Z"), 1)));
rt.location("src/muts.a", 652);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 653);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 654);
rt.opcode("AND", rt.opArg(["#"], rt.symbol("case_mask")));
rt.location("src/muts.a", 655);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 657);
rt.label(rt.symbol("+"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 658);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 660);
rt.label(rt.symbol("radix_parse"));
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 661);
rt.macroCall("PUSH16", rt.symbol("ptr0"));
rt.location("src/muts.a", 662);
rt.macroCall("MOV16Z", rt.symbol("acc0"));
rt.location("src/muts.a", 663);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 664);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("to_upper")));
rt.location("src/muts.a", 665);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 666);
rt.opcode("SBC", rt.opArg(["#"], rt.chars("0")));
rt.location("src/muts.a", 667);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 668);
rt.opcode("CMP", rt.opArg(["#"], 10));
rt.location("src/muts.a", 669);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 670);
rt.opcode(
  "CMP",
  rt.opArg(
    ["#"],
    rt.f.add(rt.f.sub(rt.f.sub(rt.chars("A"), rt.chars("9")), 1), 10)
  )
);
rt.location("src/muts.a", 671);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 672);
rt.opcode(
  "SBC",
  rt.opArg(["#"], rt.f.sub(rt.f.sub(rt.chars("A"), rt.chars("9")), 1))
);
rt.location("src/muts.a", 673);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 674);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 675);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 676);
rt.macroCall("MOV16", rt.symbol("ptr0"), rt.symbol("acc0"));
rt.location("src/muts.a", 677);
rt.macroCall("MOV16Z", rt.symbol("acc0"));
rt.location("src/muts.a", 678);
rt.opcode("LDX", rt.opArg(["#"], 5));
rt.location("src/muts.a", 679);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 680);
rt.label(rt.symbol("--"));
rt.opcode("ROR");
rt.location("src/muts.a", 681);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 682);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 683);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 684);
rt.macroCall("ADC16", rt.symbol("acc0"), rt.symbol("acc0"), rt.symbol("ptr0"));
rt.location("src/muts.a", 685);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 686);
rt.label(rt.symbol("+"));
rt.macroCall("ASL16", rt.symbol("ptr0"));
rt.location("src/muts.a", 687);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 688);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("--")));
rt.location("src/muts.a", 689);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 690);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 691);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 692);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 693);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 694);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 695);
rt.label(rt.symbol("+"));
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("cmdline")));
rt.location("src/muts.a", 696);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 697);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 698);
rt.label(rt.symbol("++"));
rt.macroCall("POP16", rt.symbol("ptr0"));
rt.location("src/muts.a", 699);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 700);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 701);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol("cmdline")));
rt.location("src/muts.a", 702);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("cmdline")));
rt.location("src/muts.a", 703);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 704);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdline"), 1)));
rt.location("src/muts.a", 705);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 706);
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 707);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 709);
// Expression evaluator. This has a longstanding bug (since 1984): it

rt.location("src/muts.a", 710);
// right-recurses - so it evaluates A - B - C as A - (B - C) rather

rt.location("src/muts.a", 711);
// than (A - B) - C. I knew about it at the time but, for some reason,

rt.location("src/muts.a", 712);
// didn't fix it.

rt.location("src/muts.a", 714);
rt.label(rt.symbol("eval_atom"));
rt.opcode("TSX", rt.opArg(["impl"])), // check SP
  rt.location("src/muts.a", 715);
rt.opcode("CPX", rt.opArg(["#"], 128)), // could just be a BMI
  rt.location("src/muts.a", 716);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 717);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 718);
rt.directive("TEXT", 161, "Formula too complex", 0);
rt.location("src/muts.a", 720);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("lookup_token")));
rt.location("src/muts.a", 721);
// - = negate term

rt.location("src/muts.a", 722);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("-")));
rt.location("src/muts.a", 723);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 724);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_atom")));
rt.location("src/muts.a", 725);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 726);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 727);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 728);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 729);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 730);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 731);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 732);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 734);
// + = skipped

rt.location("src/muts.a", 735);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("+")));
rt.location("src/muts.a", 736);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("eval_atom")));
rt.location("src/muts.a", 738);
// ? = peek

rt.location("src/muts.a", 739);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("?")));
rt.location("src/muts.a", 740);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 741);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_atom")));
rt.location("src/muts.a", 742);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 743);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 744);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 745);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 746);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 748);
// ! = word peek

rt.location("src/muts.a", 749);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("!")));
rt.location("src/muts.a", 750);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 751);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_atom")));
rt.location("src/muts.a", 752);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 753);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 754);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 755);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 756);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 757);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 758);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 759);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 761);
// @ = set radix

rt.location("src/muts.a", 762);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("@")));
rt.location("src/muts.a", 763);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 764);
rt.opcode("LDA", rt.opArg(["#"], 10));
rt.location("src/muts.a", 765);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 766);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_d")));
rt.location("src/muts.a", 767);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 768);
rt.opcode("CMP", rt.opArg(["#"], 2));
rt.location("src/muts.a", 769);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("throw_bad_base")));
rt.location("src/muts.a", 770);
rt.opcode("CMP", rt.opArg(["#"], 35));
rt.location("src/muts.a", 771);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("throw_bad_base")));
rt.location("src/muts.a", 772);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 773);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_comma")));
rt.location("src/muts.a", 774);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("eval_atom")));
rt.location("src/muts.a", 776);
// 9e = NOT

rt.location("src/muts.a", 777);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("tok_not")));
rt.location("src/muts.a", 778);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 779);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_atom")));
rt.location("src/muts.a", 780);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 781);
rt.opcode("EOR", rt.opArg(["#"], 255));
rt.location("src/muts.a", 782);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 783);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 784);
rt.opcode("EOR", rt.opArg(["#"], 255));
rt.location("src/muts.a", 785);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 786);
rt.label(rt.symbol("-"));
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 788);
rt.label(rt.symbol("throw_bad_base"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 789);
rt.directive("TEXT", 162, "Bad base", 0);
rt.location("src/muts.a", 791);
// ( = nested

rt.location("src/muts.a", 792);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("(")));
rt.location("src/muts.a", 793);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 794);
// { = nested

rt.location("src/muts.a", 795);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("{")));
rt.location("src/muts.a", 796);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 797);
// [ = nested

rt.location("src/muts.a", 798);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("[")));
rt.location("src/muts.a", 799);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 800);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.f.sub(rt.chars("["), 1)));
rt.location("src/muts.a", 801);
rt.opcode("ADC", rt.opArg(["#"], 1));
rt.location("src/muts.a", 802);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 803);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_hex")));
rt.location("src/muts.a", 804);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 805);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 806);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 807);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 808);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 809);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 810);
rt.directive("TEXT", 163, "Missing bracket", 0);
rt.location("src/muts.a", 812);
// ' = char const

rt.location("src/muts.a", 813);
rt.label(rt.symbol("++"));
rt.opcode("CMP", rt.opArg(["#"], "'"));
rt.location("src/muts.a", 814);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 815);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 816);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 817);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 818);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 819);
rt.opcode("CMP", rt.opArg(["#"], "'"));
rt.location("src/muts.a", 820);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("syn_err_jump")));
rt.location("src/muts.a", 821);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 823);
// : = variable lookup

rt.location("src/muts.a", 824);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars(":")));
rt.location("src/muts.a", 825);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 826);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 827);
rt.opcode("AND", rt.opArg(["#"], rt.symbol("case_mask")));
rt.location("src/muts.a", 828);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("A")));
rt.location("src/muts.a", 829);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 831);
rt.label(rt.symbol("throw_badvar"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 832);
rt.directive("TEXT", 164, "Bad variable", 0);
rt.location("src/muts.a", 834);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.f.add(rt.chars("Z"), 1)));
rt.location("src/muts.a", 835);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("throw_badvar")));
rt.location("src/muts.a", 836);
rt.opcode("ASL");
rt.location("src/muts.a", 837);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 838);
rt.opcode(
  "LDA",
  rt.opArg(
    ["abs,X", "zpg,X"],
    rt.f.add(rt.symbol("vars"), rt.f.mul(rt.chars("?"), 2))
  )
);
rt.location("src/muts.a", 839);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 840);
rt.opcode(
  "LDA",
  rt.opArg(
    ["abs,X", "zpg,X"],
    rt.f.add(rt.f.add(rt.symbol("vars"), rt.f.mul(rt.chars("?"), 2)), 1)
  )
);
rt.location("src/muts.a", 841);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 842);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 844);
// The top 8k of the ROM can optionally contain an assembler which

rt.location("src/muts.a", 845);
// handles the ASSEMBLE command and can also extend the expression

rt.location("src/muts.a", 846);
// evaluator by parsing additional atoms here.

rt.location("src/muts.a", 848);
rt.label(rt.symbol("++"));
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.symbol("x_present")));
rt.location("src/muts.a", 849);
rt.opcode("CPX", rt.opArg(["#"], 255));
rt.location("src/muts.a", 850);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 851);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("x_eval")));
rt.location("src/muts.a", 853);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 854);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 855);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("radix_parse")));
rt.location("src/muts.a", 856);
rt.opcode("BMI", rt.opArg(["rel"], rt.symbol("syn_err_jump")));
rt.location("src/muts.a", 857);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 858);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("to_upper")));
rt.location("src/muts.a", 859);
// k suffix?

rt.location("src/muts.a", 860);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("K")));
rt.location("src/muts.a", 861);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 862);
// multiply by 1024

rt.location("src/muts.a", 863);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 864);
rt.opcode("ASL");
rt.location("src/muts.a", 865);
rt.opcode("ASL");
rt.location("src/muts.a", 866);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 867);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 868);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 869);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 871);
rt.label(rt.symbol("+"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 873);
rt.label(rt.symbol("syn_err_jump"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("syntax_error")));
rt.location("src/muts.a", 875);
rt.label(rt.symbol("eval_b"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_atom")));
rt.location("src/muts.a", 876);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 877);
// * = multiply

rt.location("src/muts.a", 878);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("*")));
rt.location("src/muts.a", 879);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 880);
rt.macroCall("PUSH16", rt.symbol("acc0"));
rt.location("src/muts.a", 881);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_b")));
rt.location("src/muts.a", 882);
rt.macroCall("POP16", rt.symbol("acc2"));
rt.location("src/muts.a", 883);
rt.macroCall("MOV16Z", rt.symbol("ptr0"));
rt.location("src/muts.a", 884);
rt.opcode("LDY", rt.opArg(["#"], 16)), // bits
  rt.location("src/muts.a", 885);
rt.label(rt.symbol("-"));
rt.opcode("LSR", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 886);
rt.opcode("ROR", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 887);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 888);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 889);
rt.macroCall("ADC16", rt.symbol("ptr0"), rt.symbol("acc2"), rt.symbol("ptr0"));
rt.location("src/muts.a", 890);
rt.label(rt.symbol("++"));
rt.macroCall("ASL16", rt.symbol("acc2"));
rt.location("src/muts.a", 891);
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 892);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 893);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("++")));
rt.location("src/muts.a", 895);
// / = divide

rt.location("src/muts.a", 896);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("/")));
rt.location("src/muts.a", 897);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 898);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("divmod")));
rt.location("src/muts.a", 899);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 900);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 901);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("+++")));
rt.location("src/muts.a", 903);
// % = mod

rt.location("src/muts.a", 904);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("%")));
rt.location("src/muts.a", 905);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 906);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("divmod")));
rt.location("src/muts.a", 907);
rt.label(rt.symbol("++"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 908);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 909);
rt.label(rt.symbol("+++"));
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 910);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 911);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 913);
rt.label(rt.symbol("+"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 915);
rt.label(rt.symbol("eval_c"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_b")));
rt.location("src/muts.a", 916);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 917);
// + = add

rt.location("src/muts.a", 918);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("+")));
rt.location("src/muts.a", 919);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 920);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 921);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 922);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 923);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 924);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_c")));
rt.location("src/muts.a", 925);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 926);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 927);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 928);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 929);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 930);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 931);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 932);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 934);
// - = subtract

rt.location("src/muts.a", 935);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("-")));
rt.location("src/muts.a", 936);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 937);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 938);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 939);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 940);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 941);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_c")));
rt.location("src/muts.a", 942);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 943);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 944);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 945);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 946);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 947);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 948);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 949);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 951);
rt.label(rt.symbol("+"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 953);
rt.label(rt.symbol("divmod"));
rt.macroCall("PUSH16", rt.symbol("acc0"));
rt.location("src/muts.a", 954);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_b")));
rt.location("src/muts.a", 955);
rt.macroCall("POP16", rt.symbol("acc2"));
rt.location("src/muts.a", 956);
rt.opcode("LDY", rt.opArg(["#"], 16));
rt.location("src/muts.a", 957);
rt.macroCall("MOV16Z", rt.symbol("ptr0"));
rt.location("src/muts.a", 958);
rt.label(rt.symbol("-"));
rt.macroCall("ASL16", rt.symbol("acc2"));
rt.location("src/muts.a", 959);
rt.macroCall("ROL16", rt.symbol("ptr0"));
rt.location("src/muts.a", 960);
rt.macroCall("CMP16", rt.symbol("ptr0"), rt.symbol("acc0"));
rt.location("src/muts.a", 961);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 962);
rt.macroCall("SBC16", rt.symbol("ptr0"), rt.symbol("ptr0"), rt.symbol("acc0"));
rt.location("src/muts.a", 963);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 964);
rt.label(rt.symbol("+"));
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 965);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 966);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 968);
rt.label(rt.symbol("eval_hex"));
rt.opcode("LDA", rt.opArg(["#"], 16));
rt.location("src/muts.a", 969);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 970);
rt.label(rt.symbol("eval_d"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_c")));
rt.location("src/muts.a", 971);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("lookup_token")));
rt.location("src/muts.a", 972);
// AND

rt.location("src/muts.a", 973);
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("tok_and")));
rt.location("src/muts.a", 974);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 975);
rt.macroCall("PUSH16", rt.symbol("acc0"));
rt.location("src/muts.a", 976);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_d")));
rt.location("src/muts.a", 977);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 978);
rt.opcode("AND", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 979);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 980);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 981);
rt.opcode("AND", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 982);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 983);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 985);
// OR

rt.location("src/muts.a", 986);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("tok_or")));
rt.location("src/muts.a", 987);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 988);
rt.macroCall("PUSH16", rt.symbol("acc0"));
rt.location("src/muts.a", 989);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_d")));
rt.location("src/muts.a", 990);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 991);
rt.opcode("ORA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 992);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 993);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 994);
rt.opcode("ORA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 995);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 996);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 998);
// EOR

rt.location("src/muts.a", 999);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("tok_eor")));
rt.location("src/muts.a", 1000);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("unget")));
rt.location("src/muts.a", 1001);
rt.macroCall("PUSH16", rt.symbol("acc0"));
rt.location("src/muts.a", 1002);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_d")));
rt.location("src/muts.a", 1003);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1004);
rt.opcode("EOR", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 1005);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 1006);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1007);
rt.opcode("EOR", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 1008);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 1009);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1011);
rt.label(rt.symbol("unget"));
rt.macroCall("DEC16BUG", rt.symbol("cmdline"));
rt.location("src/muts.a", 1012);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1014);
rt.label(rt.symbol("eval"));
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1015);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1016);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1017);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1018);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1019);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1020);
rt.macroCall("PUSH16", rt.symbol("ptr0"));
rt.location("src/muts.a", 1021);
rt.macroCall("PUSH16", rt.symbol("acc2"));
rt.location("src/muts.a", 1022);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_hex")));
rt.location("src/muts.a", 1023);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_comma")));
rt.location("src/muts.a", 1024);
rt.macroCall("POP16", rt.symbol("acc2"));
rt.location("src/muts.a", 1025);
rt.macroCall("POP16", rt.symbol("ptr0"));
rt.location("src/muts.a", 1026);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1027);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1028);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1029);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1030);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1031);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1032);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1034);
rt.label(rt.symbol("eval_byte"));
rt.macroCall("PUSH16", rt.symbol("acc0"));
rt.location("src/muts.a", 1035);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1036);
rt.opcode("LDY", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 1037);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 1038);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1039);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 1040);
// "Byte out of range"

rt.location("src/muts.a", 1041);
rt.directive("TEXT", 165, "Byte out of range", 0);
rt.location("src/muts.a", 1042);
rt.label(rt.symbol("+"));
rt.macroCall("POP16", rt.symbol("acc0"));
rt.location("src/muts.a", 1043);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1044);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1046);
rt.label(rt.symbol("skip_comma"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1047);
rt.opcode("CMP", rt.opArg(["#"], rt.chars(",")));
rt.location("src/muts.a", 1048);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1049);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 1050);
rt.label(rt.symbol("+"));
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1052);
rt.label(rt.symbol("lookup_token"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("cmd_offset")));
rt.location("src/muts.a", 1053);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1054);
rt.macroCall("PUSH16", rt.symbol("cmdhelp"));
rt.location("src/muts.a", 1055);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("lookup_command")));
rt.location("src/muts.a", 1056);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1057);
rt.macroCall("POP16", rt.symbol("cmdhelp"));
rt.location("src/muts.a", 1058);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1059);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("cmd_offset")));
rt.location("src/muts.a", 1060);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1061);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1063);
rt.label(rt.symbol("lookup_command"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1064);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 1065);
rt.opcode("LDA", rt.opArg(["#"], 128));
rt.location("src/muts.a", 1066);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc1"), 1)));
rt.location("src/muts.a", 1067);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1068);
rt.label(rt.symbol("lc_next_cmd"));
rt.opcode("LDY", rt.opArg(["#"], 255));
rt.location("src/muts.a", 1069);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("cmd_offset")));
rt.location("src/muts.a", 1070);
rt.label(rt.symbol("lc_next_char"));
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1071);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("cmdline")));
rt.location("src/muts.a", 1072);
rt.opcode("AND", rt.opArg(["#"], rt.symbol("case_mask")));
rt.location("src/muts.a", 1073);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 1074);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("cmd_table")));
rt.location("src/muts.a", 1075);
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1076);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1077);
rt.opcode("AND", rt.opArg(["#"], 127));
rt.location("src/muts.a", 1078);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 1079);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("lc_dot")));
rt.location("src/muts.a", 1080);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1081);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("lc_next_char")));
rt.location("src/muts.a", 1082);
rt.label(rt.symbol("lc_match"));
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1083);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1084);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1085);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 1086);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol("cmdline")));
rt.location("src/muts.a", 1087);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("cmdline")));
rt.location("src/muts.a", 1088);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("lc_copy")));
rt.location("src/muts.a", 1089);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdline"), 1)));
rt.location("src/muts.a", 1090);
rt.label(rt.symbol("lc_copy"));
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("cmd_table")));
rt.location("src/muts.a", 1091);
rt.opcode("STA", rt.opArg(["abs,Y"], rt.symbol("cmdjmp")));
rt.location("src/muts.a", 1092);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1093);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1094);
rt.opcode("CPY", rt.opArg(["#"], 4));
rt.location("src/muts.a", 1095);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("lc_copy")));
rt.location("src/muts.a", 1096);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc1"), 1)));
rt.location("src/muts.a", 1097);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1099);
// check for . abbreviation of command

rt.location("src/muts.a", 1100);
rt.label(rt.symbol("lc_dot"));
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1101);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc1"), 1)));
rt.location("src/muts.a", 1102);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1103);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1104);
rt.label(rt.symbol("-"));
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1105);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("cmd_table")));
rt.location("src/muts.a", 1106);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1107);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1108);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("cmdline")));
rt.location("src/muts.a", 1109);
rt.opcode("CMP", rt.opArg(["#"], rt.chars(".")));
rt.location("src/muts.a", 1110);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("lc_match")));
rt.location("src/muts.a", 1111);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1112);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1113);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1114);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1115);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("cmd_table")));
rt.location("src/muts.a", 1116);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("lc_next_cmd")));
rt.location("src/muts.a", 1117);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 1119);
// "Syntax: "

rt.location("src/muts.a", 1120);
rt.label(rt.symbol("syntax_prefix"));
rt.directive("TEXT", "Syntax: ");
rt.location("src/muts.a", 1122);
rt.label(rt.symbol("check_eol"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1123);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("syntax_error")));
rt.location("src/muts.a", 1124);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1126);
rt.label(rt.symbol("syntax_error"));
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1127);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 1128);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc1"), 1)));
rt.location("src/muts.a", 1129);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 1)));
rt.location("src/muts.a", 1130);
rt.opcode("LDY", rt.opArg(["abs", "zpg"], rt.symbol("cmd_offset")));
rt.location("src/muts.a", 1131);
rt.opcode("CPY", rt.opArg(["#"], 255));
rt.location("src/muts.a", 1132);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("syn_copy")));
rt.location("src/muts.a", 1133);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 1134);
// "Bad expression"

rt.location("src/muts.a", 1135);
rt.directive("TEXT", 166, "Bad expression", 0);
rt.location("src/muts.a", 1136);
rt.label(rt.symbol("syn_copy"));
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("syntax_prefix")));
rt.location("src/muts.a", 1137);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("stack"), 2)));
rt.location("src/muts.a", 1138);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1139);
rt.opcode("CPX", rt.opArg(["#"], 8));
rt.location("src/muts.a", 1140);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("syn_copy")));
rt.location("src/muts.a", 1141);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,Y"], rt.symbol("cmd_table")));
rt.location("src/muts.a", 1142);
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1143);
rt.opcode("AND", rt.opArg(["#"], 127));
rt.location("src/muts.a", 1144);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("stack"), 2)));
rt.location("src/muts.a", 1145);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1146);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1147);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1148);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1149);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 1150);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("stack"), 2)));
rt.location("src/muts.a", 1151);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1152);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("cmdhelp")));
rt.location("src/muts.a", 1153);
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1154);
rt.opcode("AND", rt.opArg(["#"], 127));
rt.location("src/muts.a", 1155);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("stack"), 3)));
rt.location("src/muts.a", 1156);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1157);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1158);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1159);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1161);
rt.label(rt.symbol("stack_jmp"));
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1162);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("stack"), 3)));
rt.location("src/muts.a", 1163);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("stack")));
rt.location("src/muts.a", 1165);
rt.label(rt.symbol("parse_bytes"));
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1166);
rt.label(rt.symbol("parse_bytes_tail"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_comma")));
rt.location("src/muts.a", 1167);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1168);
rt.opcode("CMP", rt.opArg(["#"], 34));
rt.location("src/muts.a", 1169);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 1170);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 1171);
rt.opcode("CMP", rt.opArg(["#"], 34));
rt.location("src/muts.a", 1172);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1173);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 1174);
rt.opcode("CMP", rt.opArg(["#"], 34));
rt.location("src/muts.a", 1175);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 1176);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], 13));
rt.location("src/muts.a", 1177);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+++")));
rt.location("src/muts.a", 1178);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("try_poke")));
rt.location("src/muts.a", 1179);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("-")));
rt.location("src/muts.a", 1181);
rt.label(rt.symbol("++"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 1182);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1184);
// $ = peek?

rt.location("src/muts.a", 1185);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("$")));
rt.location("src/muts.a", 1186);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 1187);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 1188);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1189);
rt.opcode("CMP", rt.opArg(["#"], 13));
rt.location("src/muts.a", 1190);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1191);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1193);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 1194);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_comma")));
rt.location("src/muts.a", 1195);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_byte")));
rt.location("src/muts.a", 1196);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("try_poke")));
rt.location("src/muts.a", 1197);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("parse_bytes_tail")));
rt.location("src/muts.a", 1199);
rt.label(rt.symbol("+++"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("syntax_error")));
rt.location("src/muts.a", 1201);
rt.label(rt.symbol("++"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1202);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1203);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 1204);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1205);
rt.opcode("CMP", rt.opArg(["#"], 13));
rt.location("src/muts.a", 1206);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("parse_bytes_tail")));
rt.location("src/muts.a", 1207);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 1208);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("try_poke")));
rt.location("src/muts.a", 1209);
rt.opcode("LDY", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 1210);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("-")));
rt.location("src/muts.a", 1212);
rt.label(rt.symbol("try_poke"));
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1213);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("ptr0")));
rt.location("src/muts.a", 1214);
rt.opcode("CMP", rt.opArg(["(zpg),Y"], rt.symbol("ptr0")));
rt.location("src/muts.a", 1215);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1217);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 1218);
rt.directive("TEXT", 167, "Read only memory", 0);
rt.location("src/muts.a", 1220);
rt.label(rt.symbol("+"));
rt.macroCall("INC16", rt.symbol("ptr0"));
rt.location("src/muts.a", 1221);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1222);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1224);
rt.label(rt.symbol("acc0_to_acc2"));
rt.macroCall("MOV16", rt.symbol("acc2"), rt.symbol("acc0"));
rt.location("src/muts.a", 1225);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1227);
rt.label(rt.symbol("c_find"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("parse_range")));
rt.location("src/muts.a", 1228);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1229);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 1230);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1231);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 1232);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("parse_bytes")));
rt.location("src/muts.a", 1233);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("cmdline")));
rt.location("src/muts.a", 1234);
rt.label(rt.symbol("-"));
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1235);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1236);
rt.label(rt.symbol("--"));
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("stack")));
rt.location("src/muts.a", 1237);
rt.opcode("CMP", rt.opArg(["(zpg),Y"], rt.symbol("acc2")));
rt.location("src/muts.a", 1238);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1239);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1240);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1241);
rt.opcode("CPX", rt.opArg(["abs", "zpg"], rt.symbol("cmdline")));
rt.location("src/muts.a", 1242);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("--")));
rt.location("src/muts.a", 1243);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 1244);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 1245);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 1246);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 1247);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_escape")));
rt.location("src/muts.a", 1248);
rt.label(rt.symbol("+"));
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 1249);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1250);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 1251);
rt.label(rt.symbol("+"));
rt.macroCall("CMP16", rt.symbol("acc2"), rt.symbol("acc0"));
rt.location("src/muts.a", 1252);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1253);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 1255);
rt.label(rt.symbol("c_change"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1256);
rt.macroCall("MOV16", rt.symbol("ptr0"), rt.symbol("acc0"));
rt.location("src/muts.a", 1257);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("parse_bytes")));
rt.location("src/muts.a", 1259);
rt.label(rt.symbol("print_or_page"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1260);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("ret1")));
rt.location("src/muts.a", 1261);
rt.opcode("CMP", rt.opArg(["#"], rt.chars(",")));
rt.location("src/muts.a", 1262);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("print_or_page")));
rt.location("src/muts.a", 1263);
rt.opcode("AND", rt.opArg(["#"], rt.symbol("case_mask")));
rt.location("src/muts.a", 1264);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("P")));
rt.location("src/muts.a", 1265);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1266);
rt.opcode("LDA", rt.opArg(["#"], 14));
rt.location("src/muts.a", 1267);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1268);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("print_or_page")));
rt.location("src/muts.a", 1269);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("L")));
rt.location("src/muts.a", 1270);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1271);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("enable_printer")));
rt.location("src/muts.a", 1272);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("print_or_page")));
rt.location("src/muts.a", 1274);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], 13));
rt.location("src/muts.a", 1275);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("ret1")));
rt.location("src/muts.a", 1276);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("syntax_error")));
rt.location("src/muts.a", 1278);
rt.label(rt.symbol("ret1"));
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1280);
// flush buffers

rt.location("src/muts.a", 1281);
rt.label(rt.symbol("enable_printer"));
rt.opcode("LDA", rt.opArg(["#"], 15));
rt.location("src/muts.a", 1282);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1283);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1284);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 1285);
rt.opcode("LDA", rt.opArg(["#"], 2));
rt.location("src/muts.a", 1286);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1287);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1288);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("*")));
rt.location("src/muts.a", 1289);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("ret1")));
rt.location("src/muts.a", 1290);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 1291);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 1292);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1293);
rt.opcode("LDA", rt.opArg(["#"], 13));
rt.location("src/muts.a", 1294);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1295);
rt.opcode("LDA", rt.opArg(["#"], 3));
rt.location("src/muts.a", 1296);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1297);
rt.opcode("LDA", rt.opArg(["#"], 128));
rt.location("src/muts.a", 1298);
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1299);
rt.opcode("LDX", rt.opArg(["#"], 252));
rt.location("src/muts.a", 1300);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 1301);
rt.opcode("CPX", rt.opArg(["#"], 63));
rt.location("src/muts.a", 1302);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("throw_noprinter")));
rt.location("src/muts.a", 1303);
rt.opcode("LDA", rt.opArg(["#"], 2));
rt.location("src/muts.a", 1304);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1306);
rt.label(rt.symbol("throw_noprinter"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 1307);
// "No printer"

rt.location("src/muts.a", 1308);
rt.directive("TEXT", 168, "No printer", 0);
rt.location("src/muts.a", 1310);
rt.label(rt.symbol("parse_range"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1311);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("acc0_to_acc2")));
rt.location("src/muts.a", 1312);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1313);
rt.opcode("CMP", rt.opArg(["#"], rt.chars(".")));
rt.location("src/muts.a", 1314);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1315);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1316);
rt.opcode("CMP", rt.opArg(["#"], rt.chars(".")));
rt.location("src/muts.a", 1317);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 1318);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("syntax_error")));
rt.location("src/muts.a", 1320);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 1321);
// $ffff = end of memory

rt.location("src/muts.a", 1322);
rt.opcode("LDA", rt.opArg(["#"], 255));
rt.location("src/muts.a", 1323);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 1324);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 1325);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1327);
rt.label(rt.symbol("++"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1329);
rt.label(rt.symbol("reset_terminal"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 1330);
// disable printer, page mode off

rt.location("src/muts.a", 1331);
rt.directive("TEXT", 3, 15, 0);
rt.location("src/muts.a", 1332);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1334);
rt.label(rt.symbol("calc_columns"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osnewl")));
rt.location("src/muts.a", 1335);
rt.opcode("LDA", rt.opArg(["#"], 8));
rt.location("src/muts.a", 1336);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1337);
rt.opcode("LDA", rt.opArg(["#"], 134));
rt.location("src/muts.a", 1338);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 1339);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 1340);
rt.opcode("LDA", rt.opArg(["#"], 16));
rt.location("src/muts.a", 1341);
rt.opcode("CPX", rt.opArg(["#"], rt.f.sub(80, 1)));
rt.location("src/muts.a", 1342);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1343);
rt.opcode("LSR");
rt.location("src/muts.a", 1344);
rt.label(rt.symbol("+"));
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1346);
rt.label(rt.symbol("ram_warning"));
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1347);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1348);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1349);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1350);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 1351);
rt.directive("TEXT", "RAM from ", 0);
rt.location("src/muts.a", 1352);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1353);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 1354);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1355);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 1356);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 1357);
rt.directive("TEXT", "to ", 0);
rt.location("src/muts.a", 1358);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1359);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 1360);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1361);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 1362);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 1363);
rt.directive("TEXT", "will be corrupted", 13, 0);
rt.location("src/muts.a", 1365);
rt.label(rt.symbol("ask_continue"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 1366);
rt.directive("TEXT", "continue (Y/N) ? ", 0);
rt.location("src/muts.a", 1367);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osrdch")));
rt.location("src/muts.a", 1368);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1369);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("throw_escape")));
rt.location("src/muts.a", 1371);
rt.label(rt.symbol("+"));
rt.opcode("AND", rt.opArg(["#"], rt.symbol("case_mask")));
rt.location("src/muts.a", 1372);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("Y")));
rt.location("src/muts.a", 1373);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1374);
rt.opcode("LDA", rt.opArg(["#"], rt.chars("N")));
rt.location("src/muts.a", 1375);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1376);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1377);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 1378);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1379);
rt.opcode("LSR");
rt.location("src/muts.a", 1380);
rt.label(rt.symbol("ret2"));
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1382);
rt.label(rt.symbol("c_monitor"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1383);
rt.opcode("CMP", rt.opArg(["#"], 13));
rt.location("src/muts.a", 1384);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1385);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 1386);
rt.macroCall("MOV16", rt.symbol("stack"), rt.symbol("cmdline"));
rt.location("src/muts.a", 1387);
rt.opcode("LDA", rt.opArg(["#"], 131));
rt.location("src/muts.a", 1388);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 1389);
rt.macroCall("STXY", rt.f.add(rt.symbol("stack"), 2));
rt.location("src/muts.a", 1390);
rt.opcode("LDA", rt.opArg(["#"], 130));
rt.location("src/muts.a", 1391);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 1392);
rt.macroCall("STXY", rt.f.add(rt.symbol("stack"), 4));
rt.location("src/muts.a", 1393);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1394);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 6)));
rt.location("src/muts.a", 1395);
rt.opcode("LDY", rt.opArg(["#"], 1));
rt.location("src/muts.a", 1396);
rt.opcode("LDA", rt.opArg(["#"], 255));
rt.location("src/muts.a", 1397);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osfile")));
rt.location("src/muts.a", 1398);
rt.label(rt.symbol("+"));
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.symbol("cur_rom")));
rt.location("src/muts.a", 1399);
rt.opcode("LDA", rt.opArg(["#"], 142));
rt.location("src/muts.a", 1400);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 1402);
// address

rt.location("src/muts.a", 1403);
rt.label(rt.symbol("readline_parms"));
rt.directive("WORD", rt.symbol("cmd_line"));
rt.location("src/muts.a", 1404);
// length

rt.location("src/muts.a", 1405);
rt.directive("BYTE", rt.f.sub(rt.symbol("cmd_line_len"), 2));
rt.location("src/muts.a", 1406);
// min char

rt.location("src/muts.a", 1407);
rt.directive("BYTE", rt.chars(" "));
rt.location("src/muts.a", 1408);
// max char

rt.location("src/muts.a", 1409);
rt.directive("BYTE", 255);
rt.location("src/muts.a", 1411);
rt.label(rt.symbol("empty"));
rt.directive("TEXT", 13, 0, 0, 0);
rt.location("src/muts.a", 1413);
// ROM service entry

rt.location("src/muts.a", 1414);
rt.label(rt.symbol("language"));
rt.opcode("CMP", rt.opArg(["#"], 1));
rt.location("src/muts.a", 1415);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("ret2")));
rt.location("src/muts.a", 1416);
rt.macroCall("MOV16I", rt.symbol("brkv"), rt.symbol("brk_handler"));
rt.location("src/muts.a", 1417);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1418);
rt.opcode("LDX", rt.opArg(["#"], 63));
rt.location("src/muts.a", 1419);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("base_addr")));
rt.location("src/muts.a", 1420);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("base_addr"), 1)));
rt.location("src/muts.a", 1421);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("rom_sel")));
rt.location("src/muts.a", 1422);
rt.label(rt.symbol("-"));
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("breakpoints")));
rt.location("src/muts.a", 1423);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1424);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1425);
rt.opcode("LDX", rt.opArg(["#"], 4));
rt.location("src/muts.a", 1426);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("empty")));
rt.location("src/muts.a", 1427);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("brk_cmd")));
rt.location("src/muts.a", 1428);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1429);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1430);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1431);
rt.opcode("STX", rt.opArg(["abs", "zpg"], 1540));
rt.location("src/muts.a", 1432);
rt.opcode("LDA", rt.opArg(["#"], 240));
rt.location("src/muts.a", 1433);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("reg_s")));
rt.location("src/muts.a", 1434);
rt.opcode("LDA", rt.opArg(["#"], 93));
rt.location("src/muts.a", 1435);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("prompt")));
rt.location("src/muts.a", 1436);
rt.opcode("CLI", rt.opArg(["impl"]));
rt.location("src/muts.a", 1437);
rt.opcode("CLD", rt.opArg(["impl"]));
rt.location("src/muts.a", 1438);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("repl")));
rt.location("src/muts.a", 1440);
rt.label(rt.symbol("brk_handler"));
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1441);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1442);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1443);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("err")));
rt.location("src/muts.a", 1444);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 1445);
rt.opcode("SBC", rt.opArg(["#"], 1));
rt.location("src/muts.a", 1446);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 1447);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("err"), 1)));
rt.location("src/muts.a", 1448);
rt.opcode("SBC", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1449);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 1450);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 1451);
rt.opcode("CMP", rt.opArg(["abs,X", "zpg,X"], rt.symbol("breakpoints")));
rt.location("src/muts.a", 1452);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1453);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 1454);
rt.opcode(
  "CMP",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 1))
);
rt.location("src/muts.a", 1455);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1456);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("bp_handler")));
rt.location("src/muts.a", 1458);
rt.label(rt.symbol("+"));
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1459);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1460);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1461);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1462);
rt.opcode("CPX", rt.opArg(["#"], rt.f.mul(rt.symbol("n_breakpoints"), 4)));
rt.location("src/muts.a", 1463);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1464);
rt.opcode("LDA", rt.opArg(["#"], 126));
rt.location("src/muts.a", 1465);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 1466);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osnewl")));
rt.location("src/muts.a", 1467);
rt.opcode("LDY", rt.opArg(["#"], 1));
rt.location("src/muts.a", 1468);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("err")));
rt.location("src/muts.a", 1469);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1470);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1471);
rt.opcode("CMP", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 1472);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1473);
rt.opcode("CMP", rt.opArg(["#"], 127));
rt.location("src/muts.a", 1474);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1475);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1476);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1477);
rt.label(rt.symbol("+"));
rt.opcode("CLI", rt.opArg(["impl"]));
rt.location("src/muts.a", 1478);
rt.opcode("CLD", rt.opArg(["impl"]));
rt.location("src/muts.a", 1479);
rt.opcode("LDX", rt.opArg(["#"], 255));
rt.location("src/muts.a", 1480);
rt.opcode("TXS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1481);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osnewl")));
rt.location("src/muts.a", 1483);
// start of repl loop

rt.location("src/muts.a", 1484);
rt.label(rt.symbol("repl"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("set_private")));
rt.location("src/muts.a", 1485);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1486);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("prompt")));
rt.location("src/muts.a", 1487);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1488);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1489);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1490);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("cmdline")));
rt.location("src/muts.a", 1491);
// readline_parms

rt.location("src/muts.a", 1492);
rt.opcode("LDX", rt.opArg(["#"], rt.f.lo(rt.symbol("readline_parms"))));
rt.location("src/muts.a", 1493);
rt.opcode("LDY", rt.opArg(["#"], rt.f.hi(rt.symbol("readline_parms"))));
rt.location("src/muts.a", 1494);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osword")));
rt.location("src/muts.a", 1495);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("repl_next")));
rt.location("src/muts.a", 1496);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("throw_escape")));
rt.location("src/muts.a", 1498);
rt.label(rt.symbol("repl_next"));
rt.opcode("LDX", rt.opArg(["#"], 7));
rt.location("src/muts.a", 1499);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdline"), 1)));
rt.location("src/muts.a", 1500);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1501);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("repl")));
rt.location("src/muts.a", 1503);
// :<var> =

rt.location("src/muts.a", 1504);
rt.opcode("CMP", rt.opArg(["#"], rt.chars(":")));
rt.location("src/muts.a", 1505);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 1506);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1507);
rt.opcode("AND", rt.opArg(["#"], rt.symbol("case_mask")));
rt.location("src/muts.a", 1508);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("A")));
rt.location("src/muts.a", 1509);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1510);
rt.label(rt.symbol("-"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("throw_badvar")));
rt.location("src/muts.a", 1512);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.f.add(rt.chars("Z"), 1)));
rt.location("src/muts.a", 1513);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1514);
rt.opcode("ASL");
rt.location("src/muts.a", 1515);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1516);
rt.opcode("LDY", rt.opArg(["#"], 255));
rt.location("src/muts.a", 1517);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.symbol("cmd_offset")));
rt.location("src/muts.a", 1518);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1519);
rt.opcode("CMP", rt.opArg(["#"], "="));
rt.location("src/muts.a", 1520);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1522);
rt.label(rt.symbol("throw_missingeq"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 1523);
rt.directive("TEXT", 169, "Missing =", 0);
rt.location("src/muts.a", 1525);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1526);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 1527);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 1528);
rt.opcode(
  "STA",
  rt.opArg(
    ["abs,X", "zpg,X"],
    rt.f.add(rt.symbol("vars"), rt.f.mul(rt.chars("?"), 2))
  )
);
rt.location("src/muts.a", 1529);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 1530);
rt.opcode(
  "STA",
  rt.opArg(
    ["abs,X", "zpg,X"],
    rt.f.add(rt.f.add(rt.symbol("vars"), rt.f.mul(rt.chars("?"), 2)), 1)
  )
);
rt.location("src/muts.a", 1531);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("repl")));
rt.location("src/muts.a", 1533);
// / = set prompt

rt.location("src/muts.a", 1534);
rt.label(rt.symbol("++"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("/")));
rt.location("src/muts.a", 1535);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 1536);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1537);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 1538);
rt.opcode("CMP", rt.opArg(["#"], 13));
rt.location("src/muts.a", 1539);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1540);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("prompt")));
rt.location("src/muts.a", 1541);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1542);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1543);
rt.label(rt.symbol("+"));
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1544);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("prompt")));
rt.location("src/muts.a", 1545);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("repl")));
rt.location("src/muts.a", 1547);
// ? = show help

rt.location("src/muts.a", 1548);
rt.label(rt.symbol("++"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("?")));
rt.location("src/muts.a", 1549);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1550);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("show_help")));
rt.location("src/muts.a", 1551);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("repl")));
rt.location("src/muts.a", 1553);
// $<addr> = bytestring

rt.location("src/muts.a", 1554);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("$")));
rt.location("src/muts.a", 1555);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1556);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1557);
rt.macroCall("MOV16", rt.symbol("ptr0"), rt.symbol("acc0"));
rt.location("src/muts.a", 1558);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1559);
rt.opcode("CMP", rt.opArg(["#"], 61));
rt.location("src/muts.a", 1560);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("throw_missingeq")));
rt.location("src/muts.a", 1561);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("parse_bytes")));
rt.location("src/muts.a", 1562);
rt.opcode("LDA", rt.opArg(["#"], 13));
rt.location("src/muts.a", 1563);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("try_poke")));
rt.location("src/muts.a", 1564);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("repl")));
rt.location("src/muts.a", 1566);
// attempt command

rt.location("src/muts.a", 1567);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 1568);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("dispatch_cmd")));
rt.location("src/muts.a", 1569);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1570);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("repl")));
rt.location("src/muts.a", 1572);
// fallback to oscli

rt.location("src/muts.a", 1573);
rt.label(rt.symbol("+"));
rt.opcode("LDX", rt.opArg(["#"], rt.f.lo(rt.symbol("cmd_line"))));
rt.location("src/muts.a", 1574);
rt.opcode("LDY", rt.opArg(["#"], rt.f.hi(rt.symbol("cmd_line"))));
rt.location("src/muts.a", 1575);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oscli")));
rt.location("src/muts.a", 1576);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("repl")));
rt.location("src/muts.a", 1578);
rt.label(rt.symbol("bp_handler"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1579);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("reg_x")));
rt.location("src/muts.a", 1580);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], 252));
rt.location("src/muts.a", 1581);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("reg_a")));
rt.location("src/muts.a", 1582);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.symbol("reg_y")));
rt.location("src/muts.a", 1583);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1584);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("reg_p")));
rt.location("src/muts.a", 1585);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 1586);
rt.directive("TEXT", "Break: PC = ", 0);
rt.location("src/muts.a", 1587);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 1588);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 1589);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 1590);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 1591);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 1592);
rt.opcode("LDA", rt.opArg(["#"], 160));
rt.location("src/muts.a", 1593);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("cmdline")));
rt.location("src/muts.a", 1594);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("repl_next")));
rt.location("src/muts.a", 1596);
rt.label(rt.symbol("do_calc"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1597);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 1598);
rt.opcode("LDY", rt.opArg(["#"], 2));
rt.location("src/muts.a", 1599);
rt.opcode("LDX", rt.opArg(["#"], 18));
rt.location("src/muts.a", 1600);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("radix_print")));
rt.location("src/muts.a", 1601);
rt.opcode("LDY", rt.opArg(["#"], 8));
rt.location("src/muts.a", 1602);
rt.opcode("LDX", rt.opArg(["#"], 8));
rt.location("src/muts.a", 1603);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("radix_print")));
rt.location("src/muts.a", 1604);
rt.opcode("LDY", rt.opArg(["#"], 10));
rt.location("src/muts.a", 1605);
rt.opcode("LDX", rt.opArg(["#"], 7));
rt.location("src/muts.a", 1606);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("radix_print")));
rt.location("src/muts.a", 1607);
rt.opcode("LDY", rt.opArg(["#"], 16));
rt.location("src/muts.a", 1608);
rt.opcode("LDX", rt.opArg(["#"], 6));
rt.location("src/muts.a", 1609);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("radix_print")));
rt.location("src/muts.a", 1610);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], 1026));
rt.location("src/muts.a", 1611);
rt.opcode("CMP", rt.opArg(["#"], 2));
rt.location("src/muts.a", 1612);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1613);
rt.opcode("CMP", rt.opArg(["#"], 36));
rt.location("src/muts.a", 1614);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1615);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.symbol("cur_rom")));
rt.location("src/muts.a", 1616);
rt.opcode("LDY", rt.opArg(["abs,X", "zpg,X"], rt.symbol("rom_private")));
rt.location("src/muts.a", 1617);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1618);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1619);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 1620);
rt.directive("TEXT", 13, "Base ", 0);
rt.location("src/muts.a", 1621);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1622);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1623);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1624);
rt.macroCall("PUSH16", rt.symbol("acc0"));
rt.location("src/muts.a", 1625);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1626);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 1627);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 1628);
rt.opcode("LDY", rt.opArg(["#"], 10));
rt.location("src/muts.a", 1629);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("radix_print")));
rt.location("src/muts.a", 1630);
rt.macroCall("POP16", rt.symbol("acc0"));
rt.location("src/muts.a", 1631);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 1632);
rt.directive("TEXT", ": ", 0);
rt.location("src/muts.a", 1633);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1634);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1635);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1636);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("radix_print")));
rt.location("src/muts.a", 1637);
rt.label(rt.symbol("+"));
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1639);
rt.label(rt.symbol("radix_print"));
rt.macroCall("PUSH16", rt.symbol("acc0"));
rt.location("src/muts.a", 1640);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1641);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("radix_out")));
rt.location("src/muts.a", 1642);
rt.macroCall("POP16", rt.symbol("acc0"));
rt.location("src/muts.a", 1643);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1645);
rt.label(rt.symbol("c_calc"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("do_calc")));
rt.location("src/muts.a", 1646);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 1648);
rt.label(rt.symbol("c_move"));
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1649);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 1650);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 1651);
rt.opcode("CMP", rt.opArg(["#"], rt.chars(">")));
rt.location("src/muts.a", 1652);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1653);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 1654);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 1655);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 1656);
rt.label(rt.symbol("++"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1657);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("acc0_to_acc2")));
rt.location("src/muts.a", 1658);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1659);
rt.opcode("LDA", rt.opArg(["#"], 131));
rt.location("src/muts.a", 1660);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 1661);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1662);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 1663);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1664);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 1665);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1666);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 1667);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1668);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1669);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1670);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1671);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1672);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 1673);
rt.directive("TEXT", "Destination <= ", 0);
rt.location("src/muts.a", 1674);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1675);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 1676);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1677);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 1678);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 1679);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("ask_continue")));
rt.location("src/muts.a", 1680);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1681);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1683);
rt.label(rt.symbol("+"));
rt.macroCall("MOV16", rt.symbol("ptr0"), rt.symbol("acc0"));
rt.location("src/muts.a", 1684);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1685);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 1686);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1687);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 1688);
rt.label(rt.symbol("+"));
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1689);
rt.macroCall("CMP16", rt.symbol("ptr0"), rt.symbol("acc2"));
rt.location("src/muts.a", 1690);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("move_next")));
rt.location("src/muts.a", 1691);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 1692);
rt.macroCall("ADC16", rt.symbol("acc2"), rt.symbol("acc2"), rt.symbol("acc0"));
rt.location("src/muts.a", 1693);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 1694);
rt.macroCall("ADC16", rt.symbol("ptr0"), rt.symbol("ptr0"), rt.symbol("acc0"));
rt.location("src/muts.a", 1695);
rt.macroCall("INC16", rt.symbol("acc0"));
rt.location("src/muts.a", 1696);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("acc2")));
rt.location("src/muts.a", 1697);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("ptr0")));
rt.location("src/muts.a", 1698);
rt.macroCall("DEC16", rt.symbol("acc2"));
rt.location("src/muts.a", 1699);
rt.macroCall("DEC16", rt.symbol("ptr0"));
rt.location("src/muts.a", 1700);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("countdown")));
rt.location("src/muts.a", 1701);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1702);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1704);
rt.label(rt.symbol("move_next"));
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("acc2")));
rt.location("src/muts.a", 1705);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("try_poke")));
rt.location("src/muts.a", 1706);
rt.macroCall("INC16", rt.symbol("acc2"));
rt.location("src/muts.a", 1707);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("countdown")));
rt.location("src/muts.a", 1708);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("move_next")));
rt.location("src/muts.a", 1709);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 1710);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1711);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 1712);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 1713);
rt.opcode("JMP", rt.opArg(["(ind)"], rt.symbol("acc0")));
rt.location("src/muts.a", 1715);
rt.label(rt.symbol("+"));
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1717);
rt.label(rt.symbol("countdown"));
rt.macroCall("DEC16", rt.symbol("acc0"));
rt.location("src/muts.a", 1718);
rt.macroCall("CMZ16", rt.symbol("acc0"));
rt.location("src/muts.a", 1719);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1721);
rt.label(rt.symbol("set_private"));
rt.opcode("LDA", rt.opArg(["#"], 255));
rt.location("src/muts.a", 1722);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1724);
rt.label(rt.symbol("clr_private"));
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1725);
rt.label(rt.symbol("+"));
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.symbol("cur_rom")));
rt.location("src/muts.a", 1726);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("rom_private")));
rt.location("src/muts.a", 1727);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1729);
rt.label(rt.symbol("get_private"));
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.symbol("cur_rom")));
rt.location("src/muts.a", 1730);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("rom_private")));
rt.location("src/muts.a", 1731);
rt.label(rt.symbol("-"));
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1733);
rt.label(rt.symbol("check_cmd_mode"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("get_private")));
rt.location("src/muts.a", 1734);
rt.opcode("BMI", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1735);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 1736);
// "Command mode only"

rt.location("src/muts.a", 1737);
rt.directive("TEXT", 170, "Command mode only", 0);
rt.location("src/muts.a", 1739);
rt.label(rt.symbol("addr_modes"));

rt.location("src/muts.a", 1740);
rt.label(rt.symbol("addr_zp"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_zp"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1741);
rt.label(rt.symbol("addr_zpi"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_zpi"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1742);
rt.label(rt.symbol("addr_abs"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_abs"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1743);
rt.label(rt.symbol("addr_absix"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_absix"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1744);
rt.label(rt.symbol("addr_absy"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_absy"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1745);
rt.label(rt.symbol("addr_absi"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_absi"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1746);
rt.label(rt.symbol("addr_zpiy"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_zpiy"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1747);
rt.label(rt.symbol("addr_zpix"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_zpix"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1748);
rt.label(rt.symbol("addr_a"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_a"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1749);
rt.label(rt.symbol("addr_impl"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_impl"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1750);
rt.label(rt.symbol("addr_imm"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_imm"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1751);
rt.label(rt.symbol("addr_rel"));
rt.directive("BYTE", rt.f.sub(rt.symbol("a_rel"), rt.symbol("addr_modes")));
rt.location("src/muts.a", 1753);
rt.label(rt.symbol("a_zp"));
rt.directive("TEXT", "H1", 0);
rt.location("src/muts.a", 1754);
rt.label(rt.symbol("a_zpi"));
rt.directive("TEXT", "H1,I", 0);
rt.location("src/muts.a", 1755);
rt.label(rt.symbol("a_abs"));
rt.directive("TEXT", "2", 0);
rt.location("src/muts.a", 1756);
rt.label(rt.symbol("a_absix"));
rt.directive("TEXT", "2,I", 0);
rt.location("src/muts.a", 1757);
rt.label(rt.symbol("a_absy"));
rt.directive("TEXT", "2,Y", 0);
rt.location("src/muts.a", 1758);
rt.label(rt.symbol("a_absi"));
rt.directive("TEXT", "(2)", 0);
rt.location("src/muts.a", 1759);
rt.label(rt.symbol("a_zpiy"));
rt.directive("TEXT", "(H1),Y", 0);
rt.location("src/muts.a", 1760);
rt.label(rt.symbol("a_zpix"));
rt.directive("TEXT", "(H1,X)", 0);
rt.location("src/muts.a", 1761);
rt.label(rt.symbol("a_a"));
rt.directive("TEXT", "A", 0);
rt.location("src/muts.a", 1762);
rt.label(rt.symbol("a_impl"));
rt.directive("TEXT", " ", 0);
rt.location("src/muts.a", 1763);
rt.label(rt.symbol("a_imm"));
rt.directive("TEXT", "#H1", 0);
rt.location("src/muts.a", 1764);
rt.label(rt.symbol("a_rel"));
rt.directive("TEXT", "H+", 0);
rt.location("src/muts.a", 1765);
rt.directive("TEXT", 13, 12);
rt.location("src/muts.a", 1767);
// first two bytes are 5 bits-per-char encodings of mnemonic

rt.location("src/muts.a", 1768);
// second two bytes are mask and bit pattern

rt.location("src/muts.a", 1771);
rt.label(rt.symbol("op_decode"));
rt.macroCall("MNEM", rt.chars("B"), rt.chars("C"), rt.chars("C"), 144, 255);
rt.location("src/muts.a", 1772);
rt.macroCall("MNEM", rt.chars("B"), rt.chars("C"), rt.chars("S"), 176, 255);
rt.location("src/muts.a", 1773);
rt.macroCall("MNEM", rt.chars("B"), rt.chars("E"), rt.chars("Q"), 240, 255);
rt.location("src/muts.a", 1774);
rt.macroCall("MNEM", rt.chars("B"), rt.chars("M"), rt.chars("I"), 48, 255);
rt.location("src/muts.a", 1775);
rt.macroCall("MNEM", rt.chars("B"), rt.chars("N"), rt.chars("E"), 208, 255);
rt.location("src/muts.a", 1776);
rt.macroCall("MNEM", rt.chars("B"), rt.chars("P"), rt.chars("L"), 16, 255);
rt.location("src/muts.a", 1777);
rt.macroCall("MNEM", rt.chars("B"), rt.chars("R"), rt.chars("K"), 0, 255);
rt.location("src/muts.a", 1778);
rt.macroCall("MNEM", rt.chars("B"), rt.chars("V"), rt.chars("C"), 80, 255);
rt.location("src/muts.a", 1779);
rt.macroCall("MNEM", rt.chars("B"), rt.chars("V"), rt.chars("S"), 112, 255);
rt.location("src/muts.a", 1780);
rt.macroCall("MNEM", rt.chars("C"), rt.chars("L"), rt.chars("C"), 24, 255);
rt.location("src/muts.a", 1781);
rt.macroCall("MNEM", rt.chars("C"), rt.chars("L"), rt.chars("D"), 216, 255);
rt.location("src/muts.a", 1782);
rt.macroCall("MNEM", rt.chars("C"), rt.chars("L"), rt.chars("I"), 88, 255);
rt.location("src/muts.a", 1783);
rt.macroCall("MNEM", rt.chars("C"), rt.chars("L"), rt.chars("V"), 184, 255);
rt.location("src/muts.a", 1784);
rt.macroCall("MNEM", rt.chars("D"), rt.chars("E"), rt.chars("X"), 202, 255);
rt.location("src/muts.a", 1785);
rt.macroCall("MNEM", rt.chars("D"), rt.chars("E"), rt.chars("Y"), 136, 255);
rt.location("src/muts.a", 1786);
rt.macroCall("MNEM", rt.chars("I"), rt.chars("N"), rt.chars("X"), 232, 255);
rt.location("src/muts.a", 1787);
rt.macroCall("MNEM", rt.chars("I"), rt.chars("N"), rt.chars("Y"), 200, 255);
rt.location("src/muts.a", 1788);
rt.macroCall("MNEM", rt.chars("J"), rt.chars("S"), rt.chars("R"), 32, 255);
rt.location("src/muts.a", 1789);
rt.macroCall("MNEM", rt.chars("N"), rt.chars("O"), rt.chars("P"), 234, 255);
rt.location("src/muts.a", 1790);
rt.macroCall("MNEM", rt.chars("P"), rt.chars("H"), rt.chars("A"), 72, 255);
rt.location("src/muts.a", 1791);
rt.macroCall("MNEM", rt.chars("P"), rt.chars("H"), rt.chars("P"), 8, 255);
rt.location("src/muts.a", 1792);
rt.macroCall("MNEM", rt.chars("P"), rt.chars("L"), rt.chars("A"), 104, 255);
rt.location("src/muts.a", 1793);
rt.macroCall("MNEM", rt.chars("P"), rt.chars("L"), rt.chars("P"), 40, 255);
rt.location("src/muts.a", 1794);
rt.macroCall("MNEM", rt.chars("R"), rt.chars("T"), rt.chars("I"), 64, 255);
rt.location("src/muts.a", 1795);
rt.macroCall("MNEM", rt.chars("R"), rt.chars("T"), rt.chars("S"), 96, 255);
rt.location("src/muts.a", 1796);
rt.macroCall("MNEM", rt.chars("S"), rt.chars("E"), rt.chars("C"), 56, 255);
rt.location("src/muts.a", 1797);
rt.macroCall("MNEM", rt.chars("S"), rt.chars("E"), rt.chars("D"), 248, 255);
rt.location("src/muts.a", 1798);
rt.macroCall("MNEM", rt.chars("S"), rt.chars("E"), rt.chars("I"), 120, 255);
rt.location("src/muts.a", 1799);
rt.macroCall("MNEM", rt.chars("T"), rt.chars("A"), rt.chars("X"), 170, 255);
rt.location("src/muts.a", 1800);
rt.macroCall("MNEM", rt.chars("T"), rt.chars("A"), rt.chars("Y"), 168, 255);
rt.location("src/muts.a", 1801);
rt.macroCall("MNEM", rt.chars("T"), rt.chars("S"), rt.chars("X"), 186, 255);
rt.location("src/muts.a", 1802);
rt.macroCall("MNEM", rt.chars("T"), rt.chars("X"), rt.chars("A"), 138, 255);
rt.location("src/muts.a", 1803);
rt.macroCall("MNEM", rt.chars("T"), rt.chars("X"), rt.chars("S"), 154, 255);
rt.location("src/muts.a", 1804);
rt.macroCall("MNEM", rt.chars("T"), rt.chars("Y"), rt.chars("A"), 152, 255);
rt.location("src/muts.a", 1805);
rt.macroCall("MNEM", rt.chars("B"), rt.chars("I"), rt.chars("T"), 36, 247);
rt.location("src/muts.a", 1806);
rt.macroCall("MNEM", rt.chars("J"), rt.chars("M"), rt.chars("P"), 76, 223);
rt.location("src/muts.a", 1807);
rt.macroCall("MNEM", rt.chars("C"), rt.chars("P"), rt.chars("X"), 224, 243);
rt.location("src/muts.a", 1808);
rt.macroCall("MNEM", rt.chars("C"), rt.chars("P"), rt.chars("Y"), 192, 243);
rt.location("src/muts.a", 1809);
rt.macroCall("MNEM", rt.chars("S"), rt.chars("T"), rt.chars("X"), 134, 231);
rt.location("src/muts.a", 1810);
rt.macroCall("MNEM", rt.chars("S"), rt.chars("T"), rt.chars("Y"), 132, 231);
rt.location("src/muts.a", 1811);
rt.macroCall("MNEM", rt.chars("D"), rt.chars("E"), rt.chars("C"), 198, 231);
rt.location("src/muts.a", 1812);
rt.macroCall("MNEM", rt.chars("I"), rt.chars("N"), rt.chars("C"), 230, 231);
rt.location("src/muts.a", 1813);
rt.macroCall("MNEM", rt.chars("A"), rt.chars("S"), rt.chars("L"), 2, 227);
rt.location("src/muts.a", 1814);
rt.macroCall("MNEM", rt.chars("L"), rt.chars("S"), rt.chars("R"), 66, 227);
rt.location("src/muts.a", 1815);
rt.macroCall("MNEM", rt.chars("R"), rt.chars("O"), rt.chars("L"), 34, 227);
rt.location("src/muts.a", 1816);
rt.macroCall("MNEM", rt.chars("R"), rt.chars("O"), rt.chars("R"), 98, 227);
rt.location("src/muts.a", 1817);
rt.macroCall("MNEM", rt.chars("L"), rt.chars("D"), rt.chars("X"), 162, 227);
rt.location("src/muts.a", 1818);
rt.macroCall("MNEM", rt.chars("L"), rt.chars("D"), rt.chars("Y"), 160, 227);
rt.location("src/muts.a", 1819);
rt.macroCall("MNEM", rt.chars("S"), rt.chars("T"), rt.chars("A"), 129, 227);
rt.location("src/muts.a", 1820);
rt.macroCall("MNEM", rt.chars("A"), rt.chars("D"), rt.chars("C"), 97, 227);
rt.location("src/muts.a", 1821);
rt.macroCall("MNEM", rt.chars("A"), rt.chars("N"), rt.chars("D"), 33, 227);
rt.location("src/muts.a", 1822);
rt.macroCall("MNEM", rt.chars("C"), rt.chars("M"), rt.chars("P"), 193, 227);
rt.location("src/muts.a", 1823);
rt.macroCall("MNEM", rt.chars("E"), rt.chars("O"), rt.chars("R"), 65, 227);
rt.location("src/muts.a", 1824);
rt.macroCall("MNEM", rt.chars("L"), rt.chars("D"), rt.chars("A"), 161, 227);
rt.location("src/muts.a", 1825);
rt.macroCall("MNEM", rt.chars("O"), rt.chars("R"), rt.chars("A"), 1, 227);
rt.location("src/muts.a", 1826);
rt.macroCall("MNEM", rt.chars("S"), rt.chars("B"), rt.chars("C"), 225, 227);
rt.location("src/muts.a", 1827);
rt.directive("BYTE", 0, 0, 0, 0);
rt.location("src/muts.a", 1828);
rt.label(rt.symbol("op_decode_end"));

rt.location("src/muts.a", 1830);
rt.directive("BYTE", 0, 0);
rt.location("src/muts.a", 1832);
// Maps opcode, mask to offset index in

rt.location("src/muts.a", 1833);
// addr_modes. Would be more efficient

rt.location("src/muts.a", 1834);
// to map directly to offset

rt.location("src/muts.a", 1835);
rt.label(rt.symbol("addr_decode"));
rt.directive(
  "BYTE",
  32,
  255,
  rt.f.sub(rt.symbol("addr_abs"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1836);
rt.directive(
  "BYTE",
  16,
  31,
  rt.f.sub(rt.symbol("addr_rel"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1837);
rt.directive(
  "BYTE",
  9,
  31,
  rt.f.sub(rt.symbol("addr_imm"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1838);
rt.directive(
  "BYTE",
  10,
  159,
  rt.f.sub(rt.symbol("addr_a"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1839);
rt.directive(
  "BYTE",
  8,
  13,
  rt.f.sub(rt.symbol("addr_impl"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1840);
rt.directive(
  "BYTE",
  0,
  159,
  rt.f.sub(rt.symbol("addr_impl"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1841);
rt.directive(
  "BYTE",
  76,
  255,
  rt.f.sub(rt.symbol("addr_abs"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1842);
rt.directive(
  "BYTE",
  128,
  157,
  rt.f.sub(rt.symbol("addr_imm"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1843);
rt.directive(
  "BYTE",
  132,
  157,
  rt.f.sub(rt.symbol("addr_zp"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1844);
rt.directive(
  "BYTE",
  140,
  157,
  rt.f.sub(rt.symbol("addr_abs"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1845);
rt.directive(
  "BYTE",
  148,
  157,
  rt.f.sub(rt.symbol("addr_zpi"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1846);
rt.directive(
  "BYTE",
  156,
  157,
  rt.f.sub(rt.symbol("addr_absix"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1847);
rt.directive(
  "BYTE",
  108,
  255,
  rt.f.sub(rt.symbol("addr_absi"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1848);
rt.directive(
  "BYTE",
  0,
  28,
  rt.f.sub(rt.symbol("addr_zpix"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1849);
rt.directive(
  "BYTE",
  4,
  28,
  rt.f.sub(rt.symbol("addr_zp"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1850);
rt.directive(
  "BYTE",
  12,
  28,
  rt.f.sub(rt.symbol("addr_abs"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1851);
rt.directive(
  "BYTE",
  16,
  28,
  rt.f.sub(rt.symbol("addr_zpiy"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1852);
rt.directive(
  "BYTE",
  20,
  28,
  rt.f.sub(rt.symbol("addr_zpi"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1853);
rt.directive(
  "BYTE",
  24,
  28,
  rt.f.sub(rt.symbol("addr_absy"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1854);
rt.directive(
  "BYTE",
  28,
  28,
  rt.f.sub(rt.symbol("addr_absix"), rt.symbol("addr_modes"))
);
rt.location("src/muts.a", 1855);
rt.label(rt.symbol("addr_decode_end"));

rt.location("src/muts.a", 1857);
// Illegal opcodes

rt.location("src/muts.a", 1858);
rt.label(rt.symbol("bad_op"));
rt.directive("BYTE", 4, 12, 18, 20, 26, 28, 34, 50);
rt.location("src/muts.a", 1859);
rt.directive("BYTE", 52, 58, 60, 66, 68, 82, 84, 90);
rt.location("src/muts.a", 1860);
rt.directive("BYTE", 92, 98, 100, 114, 116, 122, 124, 128);
rt.location("src/muts.a", 1861);
rt.directive("BYTE", 130, 137, 146, 156, 158, 178, 194, 210);
rt.location("src/muts.a", 1862);
rt.directive("BYTE", 212, 218, 220, 226, 242, 244, 250, 252);
rt.location("src/muts.a", 1863);
rt.label(rt.symbol("bad_op_end"));

rt.location("src/muts.a", 1865);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("stack_jmp")));
rt.location("src/muts.a", 1866);
rt.opcode("LDA", rt.opArg(["#"], 13));
rt.location("src/muts.a", 1867);
rt.label(rt.symbol("peek"));
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1868);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 1869);
rt.label(rt.symbol("read_rom"));
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1870);
rt.opcode("SEI", rt.opArg(["impl"]));
rt.location("src/muts.a", 1871);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1872);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1873);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 1874);
rt.opcode("STA", rt.opArg(["abs", "zpg"], 246));
rt.location("src/muts.a", 1875);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 1876);
rt.opcode("STA", rt.opArg(["abs", "zpg"], 247));
rt.location("src/muts.a", 1877);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("get_private")));
rt.location("src/muts.a", 1878);
rt.opcode("BMI", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1879);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1880);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 1881);
rt.label(rt.symbol("+"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("rom_sel")));
rt.location("src/muts.a", 1882);
rt.label(rt.symbol("++"));
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1883);
rt.opcode("JSR", rt.opArg(["abs"], 65465));
rt.location("src/muts.a", 1884);
rt.macroCall("INC16", rt.symbol("acc2"));
rt.location("src/muts.a", 1885);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1886);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 1887);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 1888);
rt.opcode("AND", rt.opArg(["#"], 7));
rt.location("src/muts.a", 1889);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1890);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1891);
rt.opcode(
  "STA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("stack"), 10))
);
rt.location("src/muts.a", 1892);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1893);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1894);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1895);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1896);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1897);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1899);
rt.label(rt.symbol("dump_line"));
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1900);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1901);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 1902);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1903);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 1904);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 1905);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1906);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 1907);
rt.label(rt.symbol("-"));
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1908);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1909);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("peek")));
rt.location("src/muts.a", 1910);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 1911);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1912);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1913);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1914);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1915);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1916);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 1917);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1918);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 1919);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1920);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1921);
rt.label(rt.symbol("-"));
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1922);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1923);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("peek")));
rt.location("src/muts.a", 1924);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("safe_ascii")));
rt.location("src/muts.a", 1925);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1926);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1927);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1928);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1929);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 1931);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["#"], rt.chars(".")));
rt.location("src/muts.a", 1932);
rt.label(rt.symbol("safe_ascii"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 1933);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1934);
rt.opcode("CMP", rt.opArg(["#"], 127));
rt.location("src/muts.a", 1935);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1936);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1938);
rt.label(rt.symbol("c_mem"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("parse_range")));
rt.location("src/muts.a", 1939);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("calc_columns")));
rt.location("src/muts.a", 1940);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1941);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("print_or_page")));
rt.location("src/muts.a", 1942);
rt.label(rt.symbol("-"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1943);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1944);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1945);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("dump_line")));
rt.location("src/muts.a", 1946);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 1947);
rt.macroCall("CMP16", rt.symbol("acc2"), rt.symbol("acc0"));
rt.location("src/muts.a", 1948);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1949);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1950);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("reset_terminal")));
rt.location("src/muts.a", 1952);
rt.label(rt.symbol("decode_admode"));
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 1953);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 1954);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 1955);
rt.label(rt.symbol("-"));
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1956);
rt.opcode("AND", rt.opArg(["abs,Y"], rt.f.add(rt.symbol("addr_decode"), 1)));
rt.location("src/muts.a", 1957);
rt.opcode("CMP", rt.opArg(["abs,Y"], rt.symbol("addr_decode")));
rt.location("src/muts.a", 1958);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1959);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1960);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1961);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1962);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1963);
rt.opcode(
  "CPY",
  rt.opArg(
    ["#"],
    rt.f.add(
      rt.f.sub(rt.symbol("addr_decode_end"), rt.symbol("addr_decode")),
      2
    )
  )
);
rt.location("src/muts.a", 1964);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 1965);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1966);
rt.label(rt.symbol("+"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1967);
rt.opcode("LDA", rt.opArg(["abs,Y"], rt.f.add(rt.symbol("addr_decode"), 2)));
rt.location("src/muts.a", 1968);
rt.opcode("CMP", rt.opArg(["#"], 12));
rt.location("src/muts.a", 1969);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1970);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc3"), 1)));
rt.location("src/muts.a", 1971);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1972);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1973);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 1974);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 1975);
rt.opcode("LDA", rt.opArg(["abs,Y"], rt.symbol("addr_modes")));
rt.location("src/muts.a", 1976);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1977);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,Y"], rt.symbol("addr_modes")));
rt.location("src/muts.a", 1978);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 1979);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 1981);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("1")));
rt.location("src/muts.a", 1982);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 1983);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 1984);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 1985);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("-")));
rt.location("src/muts.a", 1987);
rt.label(rt.symbol("++"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("2")));
rt.location("src/muts.a", 1988);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 1989);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("pr_sym16")));
rt.location("src/muts.a", 1990);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("-")));
rt.location("src/muts.a", 1992);
rt.label(rt.symbol("++"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("+")));
rt.location("src/muts.a", 1993);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 1994);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 1995);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 1996);
rt.macroCall("PUSH16", rt.symbol("acc2"));
rt.location("src/muts.a", 1997);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 1998);
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 1999);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2000);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 2001);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("+++")));
rt.location("src/muts.a", 2002);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2003);
rt.label(rt.symbol("+++"));
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2004);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2005);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2006);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2007);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 2008);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 2009);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("pr_addr")));
rt.location("src/muts.a", 2010);
rt.macroCall("POP16", rt.symbol("acc2"));
rt.location("src/muts.a", 2011);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("-")));
rt.location("src/muts.a", 2013);
rt.label(rt.symbol("++"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("I")));
rt.location("src/muts.a", 2014);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 2015);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc3"), 1)));
rt.location("src/muts.a", 2017);
rt.label(rt.symbol("++"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("H")));
rt.location("src/muts.a", 2018);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 2019);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("hex_pfx")));
rt.location("src/muts.a", 2020);
rt.label(rt.symbol("++"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2021);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("-")));
rt.location("src/muts.a", 2023);
rt.label(rt.symbol("+"));
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2025);
rt.label(rt.symbol("pr_addr"));
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2026);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2027);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 2028);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2029);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 2030);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 2031);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 2032);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2033);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 2035);
rt.label(rt.symbol("decode_instr"));
rt.macroCall("PUSH16", rt.symbol("acc2"));
rt.location("src/muts.a", 2036);
rt.opcode("LDA", rt.opArg(["#"], rt.chars("X")));
rt.location("src/muts.a", 2037);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc3"), 1)));
rt.location("src/muts.a", 2038);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 2040);
// illegal op?

rt.location("src/muts.a", 2041);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2042);
rt.label(rt.symbol("-"));
rt.opcode("CMP", rt.opArg(["abs,X", "zpg,X"], rt.symbol("bad_op")));
rt.location("src/muts.a", 2043);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2044);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2045);
rt.opcode(
  "CPX",
  rt.opArg(["#"], rt.f.sub(rt.symbol("bad_op_end"), rt.symbol("bad_op")))
);
rt.location("src/muts.a", 2046);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2047);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2048);
rt.opcode("AND", rt.opArg(["#"], 3));
rt.location("src/muts.a", 2049);
rt.opcode("CMP", rt.opArg(["#"], 3));
rt.location("src/muts.a", 2050);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 2051);
rt.label(rt.symbol("+"));
rt.opcode("LDX", rt.opArg(["#"], 11)), // indicate bad op
  rt.location("src/muts.a", 2052);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2053);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc3"), 1)));
rt.location("src/muts.a", 2055);
// lookup op

rt.location("src/muts.a", 2056);
rt.label(rt.symbol("++"));
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2057);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2058);
rt.label(rt.symbol("-"));
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2059);
rt.opcode(
  "AND",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("op_decode"), 3))
);
rt.location("src/muts.a", 2060);
rt.opcode(
  "CMP",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("op_decode"), 2))
);
rt.location("src/muts.a", 2061);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2062);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2063);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2064);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2065);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2066);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2067);
rt.opcode(
  "CPX",
  rt.opArg(["#"], rt.f.sub(rt.symbol("op_decode_end"), rt.symbol("op_decode")))
);
rt.location("src/muts.a", 2068);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2069);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2070);
rt.label(rt.symbol("+"));
rt.opcode("PLA", rt.opArg(["impl"])), // found match
  rt.location("src/muts.a", 2072);
// stash packed mnemonic

rt.location("src/muts.a", 2073);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("op_decode")));
rt.location("src/muts.a", 2074);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2075);
rt.opcode(
  "LDA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("op_decode"), 1))
);
rt.location("src/muts.a", 2076);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 1)));
rt.location("src/muts.a", 2078);
// decode 2 bytes -> 3 chars

rt.location("src/muts.a", 2079);
rt.opcode("LDY", rt.opArg(["#"], 3));
rt.location("src/muts.a", 2080);
rt.label(rt.symbol("-"));
rt.opcode("LDX", rt.opArg(["#"], 5));
rt.location("src/muts.a", 2081);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2082);
rt.label(rt.symbol("--"));
rt.macroCall("ASL16", rt.symbol("stack"));
rt.location("src/muts.a", 2083);
rt.opcode("ROL");
rt.location("src/muts.a", 2084);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2085);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("--")));
rt.location("src/muts.a", 2086);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2087);
rt.opcode("ADC", rt.opArg(["#"], rt.chars("?")));
rt.location("src/muts.a", 2088);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2089);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("X")));
rt.location("src/muts.a", 2090);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2091);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc3"), 1)));
rt.location("src/muts.a", 2092);
rt.label(rt.symbol("+"));
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2093);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2094);
rt.macroCall("POP16", rt.symbol("acc2"));
rt.location("src/muts.a", 2095);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2097);
rt.label(rt.symbol("dis_op"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("pr_addr")));
rt.location("src/muts.a", 2098);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 2099);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2100);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("decode_instr")));
rt.location("src/muts.a", 2101);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("decode_admode")));
rt.location("src/muts.a", 2102);
rt.opcode("LDA", rt.opArg(["#"], 134));
rt.location("src/muts.a", 2103);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2104);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 2105);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2106);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2107);
rt.opcode("CPX", rt.opArg(["#"], 19));
rt.location("src/muts.a", 2108);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2109);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2110);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,Y"], rt.f.add(rt.symbol("stack"), 11)));
rt.location("src/muts.a", 2111);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 2112);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2113);
rt.opcode("CPY", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 2114);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2115);
rt.opcode("LDA", rt.opArg(["#"], 134));
rt.location("src/muts.a", 2116);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2117);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 2118);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2119);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2120);
rt.opcode("CPX", rt.opArg(["#"], 29));
rt.location("src/muts.a", 2121);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2122);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2123);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,Y"], rt.f.add(rt.symbol("stack"), 11)));
rt.location("src/muts.a", 2124);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("safe_ascii")));
rt.location("src/muts.a", 2125);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2126);
rt.opcode("CPY", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 2127);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2128);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 2130);
rt.label(rt.symbol("c_base"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_cmd_mode")));
rt.location("src/muts.a", 2131);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 2132);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 2133);
rt.macroCall("MOV16", rt.symbol("base_addr"), rt.symbol("acc0"));
rt.location("src/muts.a", 2134);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2136);
rt.label(rt.symbol("copyright_marker"));
rt.directive("TEXT", 0, "(C)");
rt.location("src/muts.a", 2138);
rt.label(rt.symbol("c_select"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_cmd_mode")));
rt.location("src/muts.a", 2139);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_byte")));
rt.location("src/muts.a", 2140);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2141);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 2142);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2143);
rt.opcode("CMP", rt.opArg(["#"], 16));
rt.location("src/muts.a", 2144);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2145);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 2146);
rt.directive("TEXT", 171, "Bad ROM", 0);
rt.location("src/muts.a", 2147);
rt.label(rt.symbol("+"));
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("rom_sel")));
rt.location("src/muts.a", 2148);
rt.macroCall("MOV16I", rt.symbol("acc2"), rt.symbol("copyright_offset"));
rt.location("src/muts.a", 2149);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 2150);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2151);
rt.opcode("LDX", rt.opArg(["#"], 4));
rt.location("src/muts.a", 2152);
rt.label(rt.symbol("--"));
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2153);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2154);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 2155);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2156);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2157);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2158);
rt.opcode("CPY", rt.opArg(["abs", "zpg"], rt.symbol("copyright_marker"))), // seems dodgy
  rt.location("src/muts.a", 2159);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2160);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2161);
rt.opcode("CPX", rt.opArg(["#"], 4));
rt.location("src/muts.a", 2162);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("--")));
rt.location("src/muts.a", 2163);
rt.opcode("LDA", rt.opArg(["#"], 9));
rt.location("src/muts.a", 2164);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2165);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 2166);
// "Rom: "

rt.location("src/muts.a", 2167);
rt.directive("TEXT", "Rom: ", 0);
rt.location("src/muts.a", 2168);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 2169);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2170);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2171);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 2173);
rt.label(rt.symbol("c_dis"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("parse_range")));
rt.location("src/muts.a", 2174);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("get_private")));
rt.location("src/muts.a", 2175);
rt.opcode("BMI", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2176);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2177);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 2178);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("++")));
rt.location("src/muts.a", 2180);
rt.label(rt.symbol("+"));
rt.macroCall("CMZ16", rt.symbol("base_addr"));
rt.location("src/muts.a", 2181);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2182);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("base_addr")));
rt.location("src/muts.a", 2183);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("base_addr"), 1)));
rt.location("src/muts.a", 2184);
rt.label(rt.symbol("++"));
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 2185);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 2186);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2187);
rt.macroCall("SBC16", rt.symbol("ptr0"), rt.symbol("ptr0"), rt.symbol("acc2"));
rt.location("src/muts.a", 2188);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hex_prefix")));
rt.location("src/muts.a", 2189);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("print_or_page")));
rt.location("src/muts.a", 2190);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("dis_op")));
rt.location("src/muts.a", 2191);
rt.macroCall("CMP16", rt.symbol("acc2"), rt.symbol("acc0"));
rt.location("src/muts.a", 2192);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2193);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("reset_terminal")));
rt.location("src/muts.a", 2195);
rt.label(rt.symbol("hex_prefix"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 2196);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("H")));
rt.location("src/muts.a", 2197);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2198);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 2199);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 2200);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 2201);
rt.opcode("LDA", rt.opArg(["#"], rt.chars("&")));
rt.location("src/muts.a", 2202);
rt.label(rt.symbol("++"));
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("hex_pfx")));
rt.location("src/muts.a", 2203);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2205);
rt.label(rt.symbol("service"));
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 2206);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2207);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2208);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2209);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2210);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2211);
rt.macroCall("PUSH16", rt.symbol("cmdline"));
rt.location("src/muts.a", 2212);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2213);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2214);
rt.macroCall("ADCA16", rt.symbol("cmdline"));
rt.location("src/muts.a", 2215);
rt.opcode("TSX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2216);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("stack"), 5)));
rt.location("src/muts.a", 2218);
// star command not recognised?

rt.location("src/muts.a", 2219);
rt.opcode("CMP", rt.opArg(["#"], 4));
rt.location("src/muts.a", 2220);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("star_command")));
rt.location("src/muts.a", 2222);
// *help?

rt.location("src/muts.a", 2223);
rt.opcode("CMP", rt.opArg(["#"], 9));
rt.location("src/muts.a", 2224);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("help")));
rt.location("src/muts.a", 2226);
rt.label(rt.symbol("service_done"));
rt.macroCall("POP16", rt.symbol("cmdline"));
rt.location("src/muts.a", 2227);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2228);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2230);
rt.label(rt.symbol("service_exit"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2231);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2232);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2233);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 2234);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2236);
rt.label(rt.symbol("help"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 2237);
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 2238);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 2239);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 2240);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2241);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("lookup_command")));
rt.location("src/muts.a", 2242);
rt.opcode("CMP", rt.opArg(["#"], 143));
rt.location("src/muts.a", 2243);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 2244);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("show_help")));
rt.location("src/muts.a", 2245);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("+++")));
rt.location("src/muts.a", 2247);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("pr_banner")));
rt.location("src/muts.a", 2248);
rt.label(rt.symbol("++"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("service_done")));
rt.location("src/muts.a", 2250);
rt.label(rt.symbol("star_command"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("clr_private")));
rt.location("src/muts.a", 2251);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("dispatch_cmd")));
rt.location("src/muts.a", 2252);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 2253);
rt.label(rt.symbol("+++"));
rt.opcode("TSX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2254);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2255);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("stack"), 5)));
rt.location("src/muts.a", 2256);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2257);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2258);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2259);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2260);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("service_exit")));
rt.location("src/muts.a", 2261);
rt.label(rt.symbol("++"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("service_done")));
rt.location("src/muts.a", 2263);
rt.label(rt.symbol("regnames"));
rt.directive("TEXT", "AXYS");
rt.location("src/muts.a", 2264);
rt.label(rt.symbol("regnames_end"));

rt.location("src/muts.a", 2266);
rt.label(rt.symbol("flagnames"));
rt.directive("TEXT", "nv.bdizc");
rt.location("src/muts.a", 2267);
rt.label(rt.symbol("flagnames_end"));

rt.location("src/muts.a", 2269);
rt.label(rt.symbol("show_regs"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 2270);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2271);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("regnames")));
rt.location("src/muts.a", 2272);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2273);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2274);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 2275);
rt.directive("TEXT", " = ", 0);
rt.location("src/muts.a", 2276);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2277);
rt.opcode("ASL");
rt.location("src/muts.a", 2278);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2279);
rt.opcode(
  "LDA",
  rt.opArg(["abs,Y"], rt.f.add(rt.symbol("vars"), rt.f.mul(rt.chars("?"), 2)))
), // odd calculation - would expect to sub from base
  rt.location("src/muts.a", 2280);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 2281);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2282);
rt.opcode(
  "CPX",
  rt.opArg(["#"], rt.f.sub(rt.symbol("regnames_end"), rt.symbol("regnames")))
);
rt.location("src/muts.a", 2283);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2284);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 2285);
rt.directive("TEXT", 13, "P = ", 0);
rt.location("src/muts.a", 2287);
rt.label(rt.symbol("show_flags"));
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2288);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("reg_p")));
rt.location("src/muts.a", 2289);
rt.label(rt.symbol("-"));
rt.opcode("LDX", rt.opArg(["#"], rt.chars(".")));
rt.location("src/muts.a", 2290);
rt.opcode("ASL");
rt.location("src/muts.a", 2291);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2292);
rt.opcode("LDX", rt.opArg(["abs,Y", "zpg,Y"], rt.symbol("flagnames")));
rt.location("src/muts.a", 2293);
rt.label(rt.symbol("+"));
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2294);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2295);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2296);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2297);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2298);
rt.opcode(
  "CPY",
  rt.opArg(["#"], rt.f.sub(rt.symbol("flagnames_end"), rt.symbol("flagnames")))
);
rt.location("src/muts.a", 2299);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2300);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2302);
rt.label(rt.symbol("c_regs"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("show_regs")));
rt.location("src/muts.a", 2303);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 2305);
rt.label(rt.symbol("c_go"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_cmd_mode")));
rt.location("src/muts.a", 2306);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 2307);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2308);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 2309);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2310);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 2311);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("regnames")));
rt.location("src/muts.a", 2312);
rt.opcode("ASL");
rt.location("src/muts.a", 2313);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2314);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_byte")));
rt.location("src/muts.a", 2315);
rt.opcode("LDY", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2316);
rt.opcode(
  "STA",
  rt.opArg(["abs,Y"], rt.f.add(rt.symbol("vars"), rt.f.mul(rt.chars("?"), 2)))
);
rt.location("src/muts.a", 2317);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2318);
rt.opcode(
  "CPX",
  rt.opArg(["#"], rt.f.sub(rt.symbol("regnames_end"), rt.symbol("regnames")))
);
rt.location("src/muts.a", 2319);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2320);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("syntax_error")));
rt.location("src/muts.a", 2322);
rt.label(rt.symbol("+"));
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 2323);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("load_regs")));
rt.location("src/muts.a", 2324);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("go_acc")));
rt.location("src/muts.a", 2325);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("save_regs")));
rt.location("src/muts.a", 2326);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 2328);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 2330);
rt.label(rt.symbol("go_acc"));
rt.opcode("JMP", rt.opArg(["(ind)"], rt.symbol("acc0")));
rt.location("src/muts.a", 2332);
rt.label(rt.symbol("load_regs"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("reg_p")));
rt.location("src/muts.a", 2333);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2334);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("reg_a")));
rt.location("src/muts.a", 2335);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.symbol("reg_x")));
rt.location("src/muts.a", 2336);
rt.opcode("LDY", rt.opArg(["abs", "zpg"], rt.symbol("reg_y")));
rt.location("src/muts.a", 2337);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 2338);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2340);
rt.label(rt.symbol("save_regs"));
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 2341);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("reg_a")));
rt.location("src/muts.a", 2342);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("reg_x")));
rt.location("src/muts.a", 2343);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.symbol("reg_y")));
rt.location("src/muts.a", 2344);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2345);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("reg_p")));
rt.location("src/muts.a", 2346);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2348);
rt.label(rt.symbol("c_where"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_cmd_mode")));
rt.location("src/muts.a", 2349);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 2350);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 2351);
rt.directive("TEXT", "Breakpoints:", 13, 0);
rt.location("src/muts.a", 2352);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2353);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("breakpoints")));
rt.location("src/muts.a", 2354);
rt.opcode(
  "ORA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 1))
);
rt.location("src/muts.a", 2355);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2356);
rt.opcode(
  "LDA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 1))
);
rt.location("src/muts.a", 2357);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 2358);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("breakpoints")));
rt.location("src/muts.a", 2359);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 2360);
rt.label(rt.symbol("+"));
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2361);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2362);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2363);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2364);
rt.opcode("CPX", rt.opArg(["#"], rt.f.mul(rt.symbol("n_breakpoints"), 4)));
rt.location("src/muts.a", 2365);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2366);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 2368);
rt.label(rt.symbol("c_set"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_cmd_mode")));
rt.location("src/muts.a", 2369);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 2370);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 2371);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2372);
rt.macroCall("MOV16", rt.symbol("ptr0"), rt.symbol("acc0"));
rt.location("src/muts.a", 2373);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("breakpoints")));
rt.location("src/muts.a", 2374);
rt.opcode(
  "ORA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 1))
);
rt.location("src/muts.a", 2375);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2376);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2377);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2378);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2379);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2380);
rt.opcode("CPX", rt.opArg(["#"], rt.f.mul(rt.symbol("n_breakpoints"), 4)));
rt.location("src/muts.a", 2381);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2382);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 2383);
rt.directive("TEXT", 172, "No room", 0);
rt.location("src/muts.a", 2384);
rt.label(rt.symbol("+"));
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2385);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2386);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 2387);
rt.opcode(
  "STA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 2))
);
rt.location("src/muts.a", 2388);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2389);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("try_poke")));
rt.location("src/muts.a", 2390);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2391);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2392);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2393);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("breakpoints")));
rt.location("src/muts.a", 2394);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 2395);
rt.opcode(
  "STA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 1))
);
rt.location("src/muts.a", 2396);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2398);
rt.label(rt.symbol("c_clr"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_cmd_mode")));
rt.location("src/muts.a", 2399);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 2400);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 2401);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 2402);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 2403);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 2404);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2405);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2406);
rt.opcode("CMP", rt.opArg(["abs,X", "zpg,X"], rt.symbol("breakpoints")));
rt.location("src/muts.a", 2407);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2408);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 2409);
rt.opcode(
  "CMP",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 1))
);
rt.location("src/muts.a", 2410);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2411);
rt.opcode(
  "LDA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 2))
);
rt.location("src/muts.a", 2412);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 2413);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2414);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("breakpoints")));
rt.location("src/muts.a", 2415);
rt.opcode(
  "STA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 1))
);
rt.location("src/muts.a", 2416);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2418);
rt.label(rt.symbol("+"));
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2419);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2420);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2421);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2422);
rt.opcode("CPX", rt.opArg(["#"], rt.f.mul(rt.symbol("n_breakpoints"), 4)));
rt.location("src/muts.a", 2423);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2424);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 2425);
rt.directive("TEXT", 173, "Breakpoint not found", 0);
rt.location("src/muts.a", 2426);
rt.label(rt.symbol("++"));
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2427);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2428);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("breakpoints")));
rt.location("src/muts.a", 2429);
rt.opcode(
  "ORA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 1))
);
rt.location("src/muts.a", 2430);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2431);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("breakpoints")));
rt.location("src/muts.a", 2432);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2433);
rt.opcode(
  "LDA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 1))
);
rt.location("src/muts.a", 2434);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 2435);
rt.opcode(
  "LDA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 2))
);
rt.location("src/muts.a", 2436);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 2437);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2438);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("breakpoints")));
rt.location("src/muts.a", 2439);
rt.opcode(
  "STA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("breakpoints"), 1))
);
rt.location("src/muts.a", 2440);
rt.label(rt.symbol("+"));
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2441);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2442);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2443);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2444);
rt.opcode("CPX", rt.opArg(["#"], rt.f.mul(rt.symbol("n_breakpoints"), 4)));
rt.location("src/muts.a", 2445);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2446);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2448);
rt.label(rt.symbol("c_onbrk"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_cmd_mode")));
rt.location("src/muts.a", 2449);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2450);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 2451);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("brk_cmd")));
rt.location("src/muts.a", 2452);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2453);
rt.opcode("CMP", rt.opArg(["#"], 13));
rt.location("src/muts.a", 2454);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2455);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2457);
rt.label(rt.symbol("get_put_parms"));
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2458);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 9)));
rt.location("src/muts.a", 2459);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 6)));
rt.location("src/muts.a", 2460);
rt.macroCall("MOV16", rt.f.add(rt.symbol("stack"), 7), rt.symbol("acc0"));
rt.location("src/muts.a", 2462);
// page

rt.location("src/muts.a", 2463);
rt.opcode("LDA", rt.opArg(["#"], 131));
rt.location("src/muts.a", 2464);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2465);
rt.macroCall("STXY", rt.f.add(rt.symbol("stack"), 1));
rt.location("src/muts.a", 2467);
// machine address

rt.location("src/muts.a", 2468);
rt.opcode("LDA", rt.opArg(["#"], 130));
rt.location("src/muts.a", 2469);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2470);
rt.macroCall("STXY", rt.f.add(rt.symbol("stack"), 3));
rt.location("src/muts.a", 2472);
rt.opcode("LDA", rt.opArg(["#"], 3));
rt.location("src/muts.a", 2473);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 5)));
rt.location("src/muts.a", 2474);
rt.opcode("LDA", rt.opArg(["#"], 127));
rt.location("src/muts.a", 2475);
rt.opcode("LDX", rt.opArg(["#"], rt.f.lo(rt.symbol("stack"))));
rt.location("src/muts.a", 2476);
rt.opcode("LDY", rt.opArg(["#"], rt.f.hi(rt.symbol("stack"))));
rt.location("src/muts.a", 2477);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2479);
rt.label(rt.symbol("get_drive"));
rt.opcode("LDA", rt.opArg(["#"], 1));
rt.location("src/muts.a", 2480);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2481);
// machine high order address

rt.location("src/muts.a", 2482);
rt.opcode("LDA", rt.opArg(["#"], 130));
rt.location("src/muts.a", 2483);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2484);
rt.macroCall("STXY", rt.f.add(rt.symbol("stack"), 3));
rt.location("src/muts.a", 2485);
rt.opcode("LDA", rt.opArg(["#"], rt.f.lo(rt.f.add(rt.symbol("stack"), 8))));
rt.location("src/muts.a", 2486);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 1)));
rt.location("src/muts.a", 2487);
rt.opcode("LDY", rt.opArg(["#"], rt.f.hi(rt.f.add(rt.symbol("stack"), 8))));
rt.location("src/muts.a", 2488);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 2)));
rt.location("src/muts.a", 2489);
rt.opcode("LDA", rt.opArg(["#"], 6));
rt.location("src/muts.a", 2490);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2491);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osgbpb")));
rt.location("src/muts.a", 2492);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 9)));
rt.location("src/muts.a", 2493);
rt.opcode("AND", rt.opArg(["#"], 3));
rt.location("src/muts.a", 2494);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2496);
rt.label(rt.symbol("c_verify"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("get_drive")));
rt.location("src/muts.a", 2497);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2498);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 2499);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2500);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2501);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2502);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("++")));
rt.location("src/muts.a", 2504);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 2505);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_byte")));
rt.location("src/muts.a", 2506);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2507);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 2508);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2509);
rt.opcode("CMP", rt.opArg(["#"], 4));
rt.location("src/muts.a", 2510);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 2512);
rt.label(rt.symbol("throw_baddrive"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 2513);
// "Bad drive"

rt.location("src/muts.a", 2514);
rt.directive("TEXT", 174, "Bad drive", 0);
rt.location("src/muts.a", 2516);
rt.label(rt.symbol("++"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("star_drive")));
rt.location("src/muts.a", 2517);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 2518);
rt.macroCall("MOV16Z", rt.symbol("acc0"));
rt.location("src/muts.a", 2519);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("disk_size")));
rt.location("src/muts.a", 2520);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2521);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 2522);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 2523);
rt.opcode("LDX", rt.opArg(["#"], 42));
rt.location("src/muts.a", 2524);
rt.opcode("LDY", rt.opArg(["#"], 95));
rt.location("src/muts.a", 2525);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("get_put_parms")));
rt.location("src/muts.a", 2526);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osword")));
rt.location("src/muts.a", 2527);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 2528);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 10)));
rt.location("src/muts.a", 2529);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2530);
rt.opcode("LDA", rt.opArg(["#"], rt.chars("?")));
rt.location("src/muts.a", 2531);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2532);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 2533);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2534);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2535);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2536);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2537);
rt.opcode("SBC", rt.opArg(["#"], 10));
rt.location("src/muts.a", 2538);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2539);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2540);
rt.opcode("DEC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 2541);
rt.label(rt.symbol("+"));
rt.opcode("ORA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 2542);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2543);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2544);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("star_drive")));
rt.location("src/muts.a", 2546);
rt.label(rt.symbol("disk_size"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdhelp"), 1)));
rt.location("src/muts.a", 2547);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2548);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 2549);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2550);
rt.opcode("LDX", rt.opArg(["#"], rt.f.lo(rt.f.add(rt.symbol("cmdhelp"), 1))));
rt.location("src/muts.a", 2551);
rt.opcode("LDY", rt.opArg(["#"], rt.f.hi(rt.f.add(rt.symbol("cmdhelp"), 1))));
rt.location("src/muts.a", 2552);
rt.opcode("LDA", rt.opArg(["#"], 126));
rt.location("src/muts.a", 2553);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osword")));
rt.location("src/muts.a", 2554);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2555);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 2556);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2557);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdhelp"), 1)));
rt.location("src/muts.a", 2558);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2560);
rt.label(rt.symbol("drive_cmd"));
rt.directive("TEXT", "DRIVE ");
rt.location("src/muts.a", 2561);
rt.label(rt.symbol("drive_cmd_end"));

rt.location("src/muts.a", 2563);
rt.label(rt.symbol("star_drive"));
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2564);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2565);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("drive_cmd")));
rt.location("src/muts.a", 2566);
rt.opcode(
  "STA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("stack"), 10))
);
rt.location("src/muts.a", 2567);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2568);
rt.opcode(
  "CPX",
  rt.opArg(["#"], rt.f.sub(rt.symbol("drive_cmd_end"), rt.symbol("drive_cmd")))
);
rt.location("src/muts.a", 2569);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2570);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2571);
rt.opcode("ORA", rt.opArg(["#"], rt.chars("0")));
rt.location("src/muts.a", 2572);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 16)));
rt.location("src/muts.a", 2573);
rt.opcode("LDA", rt.opArg(["#"], 13));
rt.location("src/muts.a", 2574);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 17)));
rt.location("src/muts.a", 2575);
rt.opcode("LDX", rt.opArg(["#"], 10));
rt.location("src/muts.a", 2576);
rt.opcode("LDY", rt.opArg(["#"], 1));
rt.location("src/muts.a", 2577);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("oscli")));
rt.location("src/muts.a", 2579);
rt.label(rt.symbol("show_fkeys"));
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2580);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("show_fkey")));
rt.location("src/muts.a", 2581);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2582);
rt.opcode("CPY", rt.opArg(["#"], 16));
rt.location("src/muts.a", 2583);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2584);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2586);
rt.label(rt.symbol("c_flist"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 2587);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("show_fkeys")));
rt.location("src/muts.a", 2588);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 2589);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_byte")));
rt.location("src/muts.a", 2590);
rt.opcode("CMP", rt.opArg(["#"], 16));
rt.location("src/muts.a", 2591);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2592);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 2593);
rt.directive("TEXT", 251, "Bad key", 0);
rt.location("src/muts.a", 2594);
rt.label(rt.symbol("+"));
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2596);
rt.label(rt.symbol("show_fkey"));
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2597);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 2598);
rt.directive("TEXT", "*KEY", 0);
rt.location("src/muts.a", 2599);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_escape")));
rt.location("src/muts.a", 2600);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2601);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 2602);
rt.opcode("LDY", rt.opArg(["#"], 10));
rt.location("src/muts.a", 2603);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("radix_print")));
rt.location("src/muts.a", 2604);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2605);
rt.opcode("ORA", rt.opArg(["#"], 128));
rt.location("src/muts.a", 2606);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2607);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2608);
rt.opcode("LDA", rt.opArg(["#"], 138));
rt.location("src/muts.a", 2609);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2610);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 2611);
rt.directive("TEXT", rt.f.neg(2), 0);
rt.location("src/muts.a", 2612);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["#"], 4));
rt.location("src/muts.a", 2613);
rt.opcode("LDX", rt.opArg(["#"], 2));
rt.location("src/muts.a", 2614);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2615);
rt.opcode("LDA", rt.opArg(["#"], 129));
rt.location("src/muts.a", 2616);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2617);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2618);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2619);
rt.opcode("CPY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2620);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2621);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2622);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("esc_char")));
rt.location("src/muts.a", 2623);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("-")));
rt.location("src/muts.a", 2625);
rt.label(rt.symbol("+"));
rt.opcode("LDA", rt.opArg(["#"], 4));
rt.location("src/muts.a", 2626);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2627);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2628);
rt.opcode("LDY", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2629);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 2631);
rt.label(rt.symbol("esc_char"));
rt.opcode("LDX", rt.opArg(["#"], rt.chars("|")));
rt.location("src/muts.a", 2632);
rt.opcode("CMP", rt.opArg(["#"], 128));
rt.location("src/muts.a", 2633);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2634);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2635);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2636);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2637);
rt.opcode("LDA", rt.opArg(["#"], rt.chars("!")));
rt.location("src/muts.a", 2638);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2639);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2640);
rt.opcode("AND", rt.opArg(["#"], 127));
rt.location("src/muts.a", 2641);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 2642);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2643);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2644);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2645);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2646);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2647);
rt.opcode("ORA", rt.opArg(["#"], rt.chars("@")));
rt.location("src/muts.a", 2648);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.chars("|")));
rt.location("src/muts.a", 2649);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2650);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2651);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], 127));
rt.location("src/muts.a", 2652);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2653);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2654);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2655);
rt.opcode("LDA", rt.opArg(["#"], rt.chars("?")));
rt.location("src/muts.a", 2656);
rt.label(rt.symbol("+"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2658);
rt.label(rt.symbol("times3"));
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2659);
rt.opcode("ASL");
rt.location("src/muts.a", 2660);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2661);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2662);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2664);
rt.label(rt.symbol("div3"));
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2665);
rt.opcode("LDX", rt.opArg(["#"], 8));
rt.location("src/muts.a", 2666);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2667);
rt.label(rt.symbol("-"));
rt.opcode("ASL", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2668);
rt.opcode("ROL");
rt.location("src/muts.a", 2669);
rt.opcode("CMP", rt.opArg(["#"], 3));
rt.location("src/muts.a", 2670);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2671);
rt.opcode("SBC", rt.opArg(["#"], 3));
rt.location("src/muts.a", 2672);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2673);
rt.label(rt.symbol("+"));
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2674);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2675);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 1)));
rt.location("src/muts.a", 2676);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2678);
rt.label(rt.symbol("show_line"));
rt.macroCall("PUSH16", rt.symbol("acc2"));
rt.location("src/muts.a", 2679);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("cursor_off")));
rt.location("src/muts.a", 2680);
rt.opcode("LDA", rt.opArg(["#"], 13));
rt.location("src/muts.a", 2681);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2682);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 2683);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("dump_line")));
rt.location("src/muts.a", 2684);
rt.opcode("LDA", rt.opArg(["#"], 134));
rt.location("src/muts.a", 2685);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2686);
rt.opcode("LDA", rt.opArg(["#"], 31));
rt.location("src/muts.a", 2687);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2688);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2689);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2690);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2691);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2692);
rt.macroCall("POP16", rt.symbol("acc2"));
rt.location("src/muts.a", 2693);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("cursor_on")));
rt.location("src/muts.a", 2695);
rt.label(rt.symbol("c_edit"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 2696);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("acc0_to_acc2")));
rt.location("src/muts.a", 2697);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 2698);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 2699);
// restore default windows, clear screen

rt.location("src/muts.a", 2700);
rt.directive("TEXT", 26, 12, 0);
rt.location("src/muts.a", 2701);
rt.macroCall("PUSH16", rt.symbol("acc2"));
rt.location("src/muts.a", 2702);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("calc_columns")));
rt.location("src/muts.a", 2703);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 2704);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2705);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 2706);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2707);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2708);
rt.opcode("CMP", rt.opArg(["#"], 8));
rt.location("src/muts.a", 2709);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("edit_copy_layout")));
rt.location("src/muts.a", 2710);
rt.opcode(
  "LDY",
  rt.opArg(["#"], rt.f.sub(rt.symbol("layout_80"), rt.symbol("layout_40")))
);
rt.location("src/muts.a", 2711);
rt.label(rt.symbol("edit_copy_layout"));
rt.opcode("LDA", rt.opArg(["abs,Y"], rt.symbol("layout_40")));
rt.location("src/muts.a", 2712);
rt.opcode("STA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("cmdjmp")));
rt.location("src/muts.a", 2713);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2714);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2715);
rt.opcode(
  "CPX",
  rt.opArg(["#"], rt.f.sub(rt.symbol("layout_80"), rt.symbol("layout_40")))
);
rt.location("src/muts.a", 2716);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("edit_copy_layout")));
rt.location("src/muts.a", 2717);
rt.label(rt.symbol("-"));
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 2718);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("dump_line")));
rt.location("src/muts.a", 2719);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 2721);
// read cursor position

rt.location("src/muts.a", 2722);
rt.opcode("LDA", rt.opArg(["#"], 134));
rt.location("src/muts.a", 2723);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2724);
rt.opcode("CPY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 2725);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2726);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 2727);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2728);
rt.label(rt.symbol("+"));
rt.opcode("LDA", rt.opArg(["#"], 5));
rt.location("src/muts.a", 2729);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2730);
rt.macroCall("POP16", rt.symbol("acc2"));
rt.location("src/muts.a", 2731);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 2733);
// move cursor home

rt.location("src/muts.a", 2734);
rt.directive("TEXT", 30, 0);
rt.location("src/muts.a", 2736);
// setup keyboard

rt.location("src/muts.a", 2737);
rt.opcode("LDA", rt.opArg(["#"], 4));
rt.location("src/muts.a", 2738);
rt.opcode("LDX", rt.opArg(["#"], 2));
rt.location("src/muts.a", 2739);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2741);
// function key base code

rt.location("src/muts.a", 2742);
rt.opcode("LDA", rt.opArg(["#"], 225));
rt.location("src/muts.a", 2743);
rt.opcode("LDX", rt.opArg(["#"], 124));
rt.location("src/muts.a", 2744);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2745);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2747);
// shift function key base code

rt.location("src/muts.a", 2748);
rt.opcode("LDA", rt.opArg(["#"], 226));
rt.location("src/muts.a", 2749);
rt.opcode("LDX", rt.opArg(["#"], 148));
rt.location("src/muts.a", 2750);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2751);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2753);
rt.label(rt.symbol("edit_getch"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("show_line")));
rt.location("src/muts.a", 2754);
// flush input buffers

rt.location("src/muts.a", 2755);
rt.opcode("LDA", rt.opArg(["#"], 15));
rt.location("src/muts.a", 2756);
rt.opcode("LDX", rt.opArg(["#"], 1));
rt.location("src/muts.a", 2757);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2758);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osrdch")));
rt.location("src/muts.a", 2759);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("edit_dispatch")));
rt.location("src/muts.a", 2760);
// ack escape and exit

rt.location("src/muts.a", 2761);
rt.opcode("LDA", rt.opArg(["#"], 126));
rt.location("src/muts.a", 2762);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2763);
rt.opcode("LDA", rt.opArg(["#"], 4));
rt.location("src/muts.a", 2764);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 2765);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2766);
rt.opcode("LDA", rt.opArg(["#"], 225));
rt.location("src/muts.a", 2767);
rt.opcode("LDX", rt.opArg(["#"], 1));
rt.location("src/muts.a", 2768);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2769);
rt.opcode("LDA", rt.opArg(["#"], 226));
rt.location("src/muts.a", 2770);
rt.opcode("LDX", rt.opArg(["#"], 1));
rt.location("src/muts.a", 2771);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 2772);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 2774);
// left

rt.location("src/muts.a", 2775);
rt.label(rt.symbol("edit_dispatch"));
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("key_left")));
rt.location("src/muts.a", 2776);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("is_right")));
rt.location("src/muts.a", 2777);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2778);
rt.opcode("CMP", rt.opArg(["#"], 5));
rt.location("src/muts.a", 2779);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2780);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdjmp"), 1)));
rt.location("src/muts.a", 2781);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 2782);
rt.opcode("DEC", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2783);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("edit_getch")));
rt.location("src/muts.a", 2784);
rt.label(rt.symbol("+"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("cmdjmp")));
rt.location("src/muts.a", 2785);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2786);
rt.label(rt.symbol("++"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("cmdhelp")));
rt.location("src/muts.a", 2787);
rt.label(rt.symbol("+"));
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2788);
// fake up

rt.location("src/muts.a", 2789);
rt.opcode("LDA", rt.opArg(["#"], rt.symbol("key_up")));
rt.location("src/muts.a", 2790);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("is_up")));
rt.location("src/muts.a", 2792);
// right

rt.location("src/muts.a", 2793);
rt.label(rt.symbol("is_right"));
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("key_right")));
rt.location("src/muts.a", 2794);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("is_down")));
rt.location("src/muts.a", 2795);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2796);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.symbol("cmdjmp")));
rt.location("src/muts.a", 2797);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2798);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.symbol("cmdhelp")));
rt.location("src/muts.a", 2799);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 2800);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2801);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("edit_getch")));
rt.location("src/muts.a", 2802);
rt.label(rt.symbol("+"));
rt.opcode("LDA", rt.opArg(["#"], 5));
rt.location("src/muts.a", 2803);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2804);
rt.label(rt.symbol("++"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdjmp"), 1)));
rt.location("src/muts.a", 2805);
rt.label(rt.symbol("+"));
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2806);
rt.opcode("LDA", rt.opArg(["#"], rt.symbol("key_down")));
rt.location("src/muts.a", 2808);
// down

rt.location("src/muts.a", 2809);
rt.label(rt.symbol("is_down"));
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("key_down")));
rt.location("src/muts.a", 2810);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("is_up")));
rt.location("src/muts.a", 2811);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("show_line")));
rt.location("src/muts.a", 2812);
rt.opcode("LDA", rt.opArg(["#"], 10));
rt.location("src/muts.a", 2813);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2814);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2815);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2816);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 2817);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2818);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("edit_next")));
rt.location("src/muts.a", 2819);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 2820);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("edit_getch")));
rt.location("src/muts.a", 2822);
// up

rt.location("src/muts.a", 2823);
rt.label(rt.symbol("is_up"));
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("key_up")));
rt.location("src/muts.a", 2824);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("is_sh_right")));
rt.location("src/muts.a", 2825);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("show_line")));
rt.location("src/muts.a", 2826);
rt.opcode("LDA", rt.opArg(["#"], 11));
rt.location("src/muts.a", 2827);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2828);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2829);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2830);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 2831);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 2832);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("edit_next")));
rt.location("src/muts.a", 2833);
rt.opcode("DEC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 2834);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("edit_getch"))), // oops - duplication
  rt.location("src/muts.a", 2836);
rt.label(rt.symbol("edit_next"));
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("edit_getch")));
rt.location("src/muts.a", 2838);
// shift right = skip to ascii column

rt.location("src/muts.a", 2839);
rt.label(rt.symbol("is_sh_right"));
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("key_sh_right")));
rt.location("src/muts.a", 2840);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("is_sh_left")));
rt.location("src/muts.a", 2841);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("cmdjmp")));
rt.location("src/muts.a", 2842);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2843);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("edit_next")));
rt.location("src/muts.a", 2844);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2845);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2846);
rt.opcode("SBC", rt.opArg(["#"], 5));
rt.location("src/muts.a", 2847);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("div3")));
rt.location("src/muts.a", 2848);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2849);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2850);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdjmp"), 1)));
rt.location("src/muts.a", 2851);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2852);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("edit_getch")));
rt.location("src/muts.a", 2854);
// shift left = skip to hex column

rt.location("src/muts.a", 2855);
rt.label(rt.symbol("is_sh_left"));
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("key_sh_left")));
rt.location("src/muts.a", 2856);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("is_ret")));
rt.location("src/muts.a", 2857);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2858);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdjmp"), 1)));
rt.location("src/muts.a", 2859);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("edit_next")));
rt.location("src/muts.a", 2860);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2861);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2862);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdjmp"), 1)));
rt.location("src/muts.a", 2863);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("times3")));
rt.location("src/muts.a", 2864);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2865);
rt.opcode("ADC", rt.opArg(["#"], 5));
rt.location("src/muts.a", 2866);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2867);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("edit_getch")));
rt.location("src/muts.a", 2869);
// return

rt.location("src/muts.a", 2870);
rt.label(rt.symbol("is_ret"));
rt.opcode("CMP", rt.opArg(["#"], 13));
rt.location("src/muts.a", 2871);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("edit_input")));
rt.location("src/muts.a", 2872);
rt.opcode("LDX", rt.opArg(["#"], 5));
rt.location("src/muts.a", 2873);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2874);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdjmp"), 1)));
rt.location("src/muts.a", 2875);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2876);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdjmp"), 1)));
rt.location("src/muts.a", 2877);
rt.label(rt.symbol("+"));
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2879);
// fake line down. Could just jump to the code after the key test

rt.location("src/muts.a", 2880);
rt.opcode("LDA", rt.opArg(["#"], rt.symbol("key_down")));
rt.location("src/muts.a", 2881);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("is_down")));
rt.location("src/muts.a", 2883);
// text input

rt.location("src/muts.a", 2884);
rt.label(rt.symbol("edit_input"));
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2885);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2886);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdjmp"), 1)));
rt.location("src/muts.a", 2887);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("edit_hex")));
rt.location("src/muts.a", 2888);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("cmdjmp"), 1)));
rt.location("src/muts.a", 2889);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2890);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2891);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc2")));
rt.location("src/muts.a", 2892);
rt.opcode("CMP", rt.opArg(["(zpg),Y"], rt.symbol("acc2")));
rt.location("src/muts.a", 2893);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("edit_bell")));
rt.location("src/muts.a", 2895);
// fake right. Could just jump in after the test

rt.location("src/muts.a", 2896);
rt.opcode("LDA", rt.opArg(["#"], rt.symbol("key_right")));
rt.location("src/muts.a", 2897);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("is_right")));
rt.location("src/muts.a", 2899);
rt.label(rt.symbol("edit_hex"));
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 2900);
rt.label(rt.symbol("-"));
rt.opcode("SBC", rt.opArg(["#"], 4));
rt.location("src/muts.a", 2901);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("div3")));
rt.location("src/muts.a", 2902);
rt.opcode("CMP", rt.opArg(["#"], 2));
rt.location("src/muts.a", 2903);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2904);
// move forward and try again

rt.location("src/muts.a", 2905);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2906);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 2907);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 2908);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2910);
rt.label(rt.symbol("edit_bell"));
rt.opcode("LDA", rt.opArg(["#"], 7));
rt.location("src/muts.a", 2911);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2912);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("edit_getch")));
rt.location("src/muts.a", 2914);
rt.label(rt.symbol("+"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 2915);
rt.opcode("SBC", rt.opArg(["#"], 47));
rt.location("src/muts.a", 2916);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("edit_bell")));
rt.location("src/muts.a", 2917);
rt.opcode("CMP", rt.opArg(["#"], 10));
rt.location("src/muts.a", 2918);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2919);
rt.opcode("CMP", rt.opArg(["#"], 17));
rt.location("src/muts.a", 2920);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("edit_bell")));
rt.location("src/muts.a", 2921);
rt.opcode("SBC", rt.opArg(["#"], 7));
rt.location("src/muts.a", 2922);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], 16));
rt.location("src/muts.a", 2923);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("edit_bell")));
rt.location("src/muts.a", 2924);
rt.opcode("LDX", rt.opArg(["#"], 240));
rt.location("src/muts.a", 2925);
rt.opcode("LDY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 1)));
rt.location("src/muts.a", 2926);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 2927);
rt.opcode("LDX", rt.opArg(["#"], 15));
rt.location("src/muts.a", 2928);
rt.opcode("ASL");
rt.location("src/muts.a", 2929);
rt.opcode("ASL");
rt.location("src/muts.a", 2930);
rt.opcode("ASL");
rt.location("src/muts.a", 2931);
rt.opcode("ASL");
rt.location("src/muts.a", 2932);
rt.label(rt.symbol("+"));
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 1)));
rt.location("src/muts.a", 2933);
rt.opcode("LDY", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2934);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2935);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("acc2")));
rt.location("src/muts.a", 2936);
rt.opcode("AND", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 1)));
rt.location("src/muts.a", 2937);
rt.opcode("ORA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 2938);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc2")));
rt.location("src/muts.a", 2939);
rt.opcode("CMP", rt.opArg(["(zpg),Y"], rt.symbol("acc2")));
rt.location("src/muts.a", 2940);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("edit_bell")));
rt.location("src/muts.a", 2941);
// fake right

rt.location("src/muts.a", 2942);
rt.opcode("LDA", rt.opArg(["#"], rt.symbol("key_right")));
rt.location("src/muts.a", 2943);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("is_right")));
rt.location("src/muts.a", 2945);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("edit_getch")));
rt.location("src/muts.a", 2947);
// Full screen editor columns

rt.location("src/muts.a", 2948);
rt.label(rt.symbol("layout_40"));
rt.directive("BYTE", 27, 29, 36);
rt.location("src/muts.a", 2949);
rt.label(rt.symbol("layout_80"));
rt.directive("BYTE", 51, 53, 68);
rt.location("src/muts.a", 2951);
rt.label(rt.symbol("cursor_off"));
rt.macroCall("PUSH16", rt.symbol("ptr0"));
rt.location("src/muts.a", 2952);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 2953);
// cursor off

rt.location("src/muts.a", 2954);
rt.directive("TEXT", 23, 1, 0);
rt.location("src/muts.a", 2955);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("+")));
rt.location("src/muts.a", 2957);
rt.label(rt.symbol("cursor_on"));
rt.macroCall("PUSH16", rt.symbol("ptr0"));
rt.location("src/muts.a", 2958);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 2959);
// cursor on

rt.location("src/muts.a", 2960);
rt.directive("TEXT", 23, 1, 1, 0);
rt.location("src/muts.a", 2961);
rt.label(rt.symbol("+"));
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2962);
rt.opcode("LDX", rt.opArg(["#"], 10));
rt.location("src/muts.a", 2963);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 2964);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2965);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 2966);
rt.macroCall("POP16", rt.symbol("ptr0"));
rt.location("src/muts.a", 2967);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 2969);
// Instruction lengths packed into two bit fields

rt.location("src/muts.a", 2971);
rt.label(rt.symbol("inst_len_table"));
rt.macroCall("ILEN", 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 3, 3, 1);
rt.location("src/muts.a", 2972);
rt.macroCall("ILEN", 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 3, 3, 1);
rt.location("src/muts.a", 2973);
rt.macroCall("ILEN", 3, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 3, 3, 3, 1);
rt.location("src/muts.a", 2974);
rt.macroCall("ILEN", 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 3, 3, 1);
rt.location("src/muts.a", 2975);
rt.macroCall("ILEN", 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 3, 3, 3, 1);
rt.location("src/muts.a", 2976);
rt.macroCall("ILEN", 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 3, 3, 1);
rt.location("src/muts.a", 2977);
rt.macroCall("ILEN", 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 3, 3, 3, 1);
rt.location("src/muts.a", 2978);
rt.macroCall("ILEN", 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 3, 3, 1);
rt.location("src/muts.a", 2979);
rt.macroCall("ILEN", 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 1);
rt.location("src/muts.a", 2980);
rt.macroCall("ILEN", 2, 2, 1, 1, 2, 2, 2, 1, 1, 3, 1, 1, 1, 3, 1, 1);
rt.location("src/muts.a", 2981);
rt.macroCall("ILEN", 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 3, 3, 3, 1);
rt.location("src/muts.a", 2982);
rt.macroCall("ILEN", 2, 2, 1, 1, 2, 2, 2, 1, 1, 3, 1, 1, 3, 3, 3, 1);
rt.location("src/muts.a", 2983);
rt.macroCall("ILEN", 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 3, 3, 3, 1);
rt.location("src/muts.a", 2984);
rt.macroCall("ILEN", 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 3, 3, 1);
rt.location("src/muts.a", 2985);
rt.macroCall("ILEN", 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 3, 3, 3, 1);
rt.location("src/muts.a", 2986);
rt.macroCall("ILEN", 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 3, 3, 1);
rt.location("src/muts.a", 2988);
// Compute the length in bytes of the opcode in A

rt.location("src/muts.a", 2990);
rt.label(rt.symbol("inst_len"));
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2991);
rt.opcode("LSR");
rt.location("src/muts.a", 2992);
rt.opcode("LSR");
rt.location("src/muts.a", 2993);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 2994);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 2995);
rt.opcode("AND", rt.opArg(["#"], 3));
rt.location("src/muts.a", 2996);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2997);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("inst_len_table")));
rt.location("src/muts.a", 2998);
rt.label(rt.symbol("-"));
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 2999);
rt.opcode("CPY", rt.opArg(["#"], 4));
rt.location("src/muts.a", 3000);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3001);
rt.opcode("LSR");
rt.location("src/muts.a", 3002);
rt.opcode("LSR");
rt.location("src/muts.a", 3003);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("-")));
rt.location("src/muts.a", 3005);
rt.label(rt.symbol("+"));
rt.opcode("AND", rt.opArg(["#"], 3));
rt.location("src/muts.a", 3006);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3008);
// bootstrap for stepper

rt.location("src/muts.a", 3009);
rt.label(rt.symbol("step_bootstrap"));
rt.opcode("NOP", rt.opArg(["impl"]));
rt.location("src/muts.a", 3010);
rt.opcode("NOP", rt.opArg(["impl"]));
rt.location("src/muts.a", 3011);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("stepped")));
rt.location("src/muts.a", 3012);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("branched")));
rt.location("src/muts.a", 3013);
rt.label(rt.symbol("step_bootstrap_end"));

rt.location("src/muts.a", 3015);
rt.label(rt.symbol("c_step"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_cmd_mode")));
rt.location("src/muts.a", 3016);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 3017);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("acc0_to_acc2")));
rt.location("src/muts.a", 3018);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hex_prefix")));
rt.location("src/muts.a", 3019);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("print_or_page")));
rt.location("src/muts.a", 3020);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.symbol("reg_s")));
rt.location("src/muts.a", 3021);
rt.opcode("CPX", rt.opArg(["#"], 128)), // or just BMI
  rt.location("src/muts.a", 3022);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3023);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 3024);
rt.directive("TEXT", 175, "Stack overflow", 0);
rt.location("src/muts.a", 3026);
rt.label(rt.symbol("+"));
rt.opcode("TXS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3027);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 3028);
rt.directive(
  "TEXT",
  "PC",
  rt.f.neg(3),
  "A",
  rt.f.neg(2),
  "X",
  rt.f.neg(2),
  "Y",
  rt.f.neg(2),
  "P",
  rt.f.neg(8),
  "S",
  rt.f.neg(2),
  "Opcode",
  13,
  0
);
rt.location("src/muts.a", 3030);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3031);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 3032);
rt.label(rt.symbol("step_next"));
rt.macroCall("INC16", rt.symbol("reg_pc"));
rt.location("src/muts.a", 3033);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3034);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 3035);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3036);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 3037);
rt.opcode("TSX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3038);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("reg_s")));
rt.location("src/muts.a", 3039);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("reg_a")));
rt.location("src/muts.a", 3040);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 3041);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("reg_x")));
rt.location("src/muts.a", 3042);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 3043);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("reg_y")));
rt.location("src/muts.a", 3044);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 3045);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("reg_p")));
rt.location("src/muts.a", 3046);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("show_flags")));
rt.location("src/muts.a", 3047);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(" ")));
rt.location("src/muts.a", 3048);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3049);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("reg_s")));
rt.location("src/muts.a", 3050);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 3051);
rt.opcode(
  "LDX",
  rt.opArg(
    ["#"],
    rt.f.sub(
      rt.f.sub(rt.symbol("step_bootstrap_end"), rt.symbol("step_bootstrap")),
      1
    )
  )
);
rt.location("src/muts.a", 3052);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("step_bootstrap")));
rt.location("src/muts.a", 3053);
rt.opcode(
  "STA",
  rt.opArg(["abs,X", "zpg,X"], rt.f.add(rt.symbol("stack"), 12))
);
rt.location("src/muts.a", 3054);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3055);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3056);
rt.macroCall("MOV16", rt.symbol("acc0"), rt.symbol("acc2"));
rt.location("src/muts.a", 3057);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3058);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 3059);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("decode_instr")));
rt.location("src/muts.a", 3060);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3061);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 3062);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("decode_admode")));
rt.location("src/muts.a", 3063);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osrdch")));
rt.location("src/muts.a", 3064);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 3066);
// JMP, Bxx, RTS etc are emulated

rt.location("src/muts.a", 3067);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 11)));
rt.location("src/muts.a", 3068);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("do_brk")));
rt.location("src/muts.a", 3069);
// JSR

rt.location("src/muts.a", 3070);
rt.opcode("CMP", rt.opArg(["#"], 32));
rt.location("src/muts.a", 3071);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("do_jsr")));
rt.location("src/muts.a", 3072);
// JMP

rt.location("src/muts.a", 3073);
rt.opcode("CMP", rt.opArg(["#"], 76));
rt.location("src/muts.a", 3074);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("do_jmp")));
rt.location("src/muts.a", 3075);
// JMP ()

rt.location("src/muts.a", 3076);
rt.opcode("CMP", rt.opArg(["#"], 108));
rt.location("src/muts.a", 3077);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("do_jmpi")));
rt.location("src/muts.a", 3078);
// RTS

rt.location("src/muts.a", 3079);
rt.opcode("CMP", rt.opArg(["#"], 96));
rt.location("src/muts.a", 3080);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("do_rts")));
rt.location("src/muts.a", 3081);
// RTI

rt.location("src/muts.a", 3082);
rt.opcode("CMP", rt.opArg(["#"], 64));
rt.location("src/muts.a", 3083);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("do_rti")));
rt.location("src/muts.a", 3084);
// branch?

rt.location("src/muts.a", 3085);
rt.opcode("AND", rt.opArg(["#"], 31));
rt.location("src/muts.a", 3086);
rt.opcode("CMP", rt.opArg(["#"], 16));
rt.location("src/muts.a", 3087);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("do_branch")));
rt.location("src/muts.a", 3089);
rt.label(rt.symbol("step_execute"));
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 3090);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3091);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 3092);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3093);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 3094);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("load_regs")));
rt.location("src/muts.a", 3095);
rt.opcode("JMP", rt.opArg(["abs"], rt.f.add(rt.symbol("stack"), 11)));
rt.location("src/muts.a", 3097);
rt.label(rt.symbol("do_brk"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 3098);
rt.directive("TEXT", 176, "Halted", 0);
rt.location("src/muts.a", 3100);
rt.label(rt.symbol("do_jsr"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("ex_or_step")));
rt.location("src/muts.a", 3101);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("step_execute")));
rt.location("src/muts.a", 3102);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3103);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3104);
rt.opcode("ADC", rt.opArg(["#"], 2));
rt.location("src/muts.a", 3105);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3106);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3107);
rt.opcode("ADC", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3108);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3109);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3110);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3112);
rt.label(rt.symbol("do_jmp"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("next_pc")));
rt.location("src/muts.a", 3113);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("indirect")));
rt.location("src/muts.a", 3114);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("step_next")));
rt.location("src/muts.a", 3116);
rt.label(rt.symbol("do_jmpi"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("next_pc")));
rt.location("src/muts.a", 3117);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("indirect")));
rt.location("src/muts.a", 3118);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("indirect")));
rt.location("src/muts.a", 3119);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("step_next")));
rt.location("src/muts.a", 3121);
rt.label(rt.symbol("do_rts"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3122);
rt.opcode("ADC", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3123);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3124);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3125);
rt.opcode("ADC", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3126);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3127);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("step_next")));
rt.location("src/muts.a", 3129);
rt.label(rt.symbol("do_rti"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3130);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("reg_p")));
rt.location("src/muts.a", 3131);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3132);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("do_rts")));
rt.location("src/muts.a", 3134);
rt.label(rt.symbol("do_branch"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 12)));
rt.location("src/muts.a", 3135);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc1"), 1)));
rt.location("src/muts.a", 3136);
rt.opcode("LDA", rt.opArg(["#"], 4));
rt.location("src/muts.a", 3137);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 12)));
rt.location("src/muts.a", 3138);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("step_execute")));
rt.location("src/muts.a", 3140);
rt.label(rt.symbol("ex_or_step"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 3141);
rt.directive(
  "TEXT",
  "Execute",
  rt.f.neg(1),
  "or",
  rt.f.neg(1),
  "step",
  rt.f.neg(1),
  "(E/S)",
  rt.f.neg(1),
  "?",
  rt.f.neg(1),
  0
);
rt.location("src/muts.a", 3142);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3143);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 3144);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osrdch")));
rt.location("src/muts.a", 3145);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_escape")));
rt.location("src/muts.a", 3146);
rt.opcode("AND", rt.opArg(["#"], rt.symbol("case_mask")));
rt.location("src/muts.a", 3147);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("S")));
rt.location("src/muts.a", 3148);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3149);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("E")));
rt.location("src/muts.a", 3150);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3151);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3152);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("S")));
rt.location("src/muts.a", 3153);
rt.opcode("PHP", rt.opArg(["impl"]));
rt.location("src/muts.a", 3154);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 3155);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 3156);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3158);
rt.label(rt.symbol("indirect"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 3159);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3160);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 3161);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3162);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3163);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3164);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3166);
rt.label(rt.symbol("next_pc"));
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3167);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3168);
rt.opcode("ADC", rt.opArg(["#"], 1));
rt.location("src/muts.a", 3169);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3170);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3171);
rt.opcode("ADC", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3172);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3173);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3175);
rt.label(rt.symbol("branched"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("save_regs")));
rt.location("src/muts.a", 3176);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 3177);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3178);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 3179);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3180);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc1"), 1)));
rt.location("src/muts.a", 3181);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3182);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3183);
rt.label(rt.symbol("+"));
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3184);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3185);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3186);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3187);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3188);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3189);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("step_next")));
rt.location("src/muts.a", 3191);
rt.label(rt.symbol("stepped"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("save_regs")));
rt.location("src/muts.a", 3192);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 3193);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3194);
rt.opcode("PLP", rt.opArg(["impl"]));
rt.location("src/muts.a", 3195);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("step_next")));
rt.location("src/muts.a", 3197);
rt.label(rt.symbol("c_look"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 3198);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("acc0_to_acc2")));
rt.location("src/muts.a", 3199);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hex_prefix")));
rt.location("src/muts.a", 3200);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 3201);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.symbol("cur_rom")));
rt.location("src/muts.a", 3202);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], rt.symbol("rom_private")));
rt.location("src/muts.a", 3203);
rt.opcode("BMI", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3204);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3205);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3206);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 3207);
rt.label(rt.symbol("+"));
rt.macroCall("CMZ16", rt.symbol("base_addr"));
rt.location("src/muts.a", 3208);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3209);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 3210);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3211);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("base_addr")));
rt.location("src/muts.a", 3212);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3213);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3214);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("base_addr"), 1)));
rt.location("src/muts.a", 3215);
rt.opcode("SBC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3216);
rt.label(rt.symbol("++"));
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3217);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 3219);
// cursor edit

rt.location("src/muts.a", 3220);
rt.opcode("LDA", rt.opArg(["#"], 4));
rt.location("src/muts.a", 3221);
rt.opcode("LDX", rt.opArg(["#"], 1));
rt.location("src/muts.a", 3222);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 3223);
rt.label(rt.symbol("look_next"));
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3224);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3225);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3226);
rt.opcode("SBC", rt.opArg(["#"], 40));
rt.location("src/muts.a", 3227);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3228);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3229);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3230);
rt.opcode("SBC", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3231);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3232);
rt.label(rt.symbol("--"));
rt.macroCall("PUSH16", rt.symbol("acc2"));
rt.location("src/muts.a", 3233);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 3234);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("inst_len")));
rt.location("src/muts.a", 3235);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3236);
rt.opcode("SBC", rt.opArg(["#"], 1));
rt.location("src/muts.a", 3237);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3238);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3239);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3240);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3241);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3242);
rt.label(rt.symbol("+"));
rt.macroCall("CMP16", rt.symbol("acc2"), rt.symbol("acc0"));
rt.location("src/muts.a", 3243);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+++")));
rt.location("src/muts.a", 3244);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osrdch")));
rt.location("src/muts.a", 3245);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3246);
rt.opcode("LDA", rt.opArg(["#"], 4));
rt.location("src/muts.a", 3247);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3248);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 3249);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("throw_escape")));
rt.location("src/muts.a", 3251);
rt.label(rt.symbol("+"));
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("key_down")));
rt.location("src/muts.a", 3252);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3253);
rt.opcode("CMP", rt.opArg(["#"], rt.symbol("key_up")));
rt.location("src/muts.a", 3254);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3255);
rt.macroCall("POP16", rt.symbol("acc2"));
rt.location("src/muts.a", 3256);
rt.opcode("LDA", rt.opArg(["#"], 11));
rt.location("src/muts.a", 3257);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3258);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3259);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("++")));
rt.location("src/muts.a", 3261);
rt.label(rt.symbol("+"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3262);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3263);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 3264);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("inst_len")));
rt.location("src/muts.a", 3265);
rt.opcode("SEC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3266);
rt.opcode("SBC", rt.opArg(["#"], 1));
rt.location("src/muts.a", 3267);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3268);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3269);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3270);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3271);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 3272);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3273);
rt.label(rt.symbol("++"));
rt.macroCall("PUSH16", rt.symbol("acc2"));
rt.location("src/muts.a", 3274);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3275);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("acc3")));
rt.location("src/muts.a", 3276);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("cursor_off")));
rt.location("src/muts.a", 3277);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("dis_op")));
rt.location("src/muts.a", 3278);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("cursor_on")));
rt.location("src/muts.a", 3279);
rt.macroCall("POP16", rt.symbol("acc2"));
rt.location("src/muts.a", 3280);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("look_next")));
rt.location("src/muts.a", 3282);
rt.label(rt.symbol("+++"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3283);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3284);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("--")));
rt.location("src/muts.a", 3286);
rt.label(rt.symbol("parse_tracks"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 3287);
rt.opcode("LDX", rt.opArg(["#"], 40));
rt.location("src/muts.a", 3288);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("4")));
rt.location("src/muts.a", 3289);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3290);
rt.opcode("LDX", rt.opArg(["#"], 80));
rt.location("src/muts.a", 3291);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("8")));
rt.location("src/muts.a", 3292);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3293);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 3294);
rt.directive("TEXT", 177, "40 or 80 tracks", 0);
rt.location("src/muts.a", 3295);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("getch")));
rt.location("src/muts.a", 3296);
rt.opcode("CMP", rt.opArg(["#"], rt.chars("0")));
rt.location("src/muts.a", 3297);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3298);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3299);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3300);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_comma")));
rt.location("src/muts.a", 3301);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3302);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3304);
rt.label(rt.symbol("parse_drive"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_space")));
rt.location("src/muts.a", 3305);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3306);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("unget")));
rt.location("src/muts.a", 3307);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3308);
rt.opcode("CMP", rt.opArg(["#"], 13));
rt.location("src/muts.a", 3309);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 3310);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_byte")));
rt.location("src/muts.a", 3311);
rt.opcode("CMP", rt.opArg(["#"], 4));
rt.location("src/muts.a", 3312);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3313);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("throw_baddrive")));
rt.location("src/muts.a", 3315);
rt.label(rt.symbol("+"));
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3317);
rt.label(rt.symbol("++"));
rt.opcode("LDA", rt.opArg(["#"], 1));
rt.location("src/muts.a", 3318);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("stack")));
rt.location("src/muts.a", 3319);
rt.opcode("LDA", rt.opArg(["#"], 130));
rt.location("src/muts.a", 3320);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 3321);
rt.macroCall("STXY", rt.f.add(rt.symbol("stack"), 3));
rt.location("src/muts.a", 3322);
rt.opcode("LDA", rt.opArg(["#"], 16));
rt.location("src/muts.a", 3323);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 1)));
rt.location("src/muts.a", 3324);
rt.opcode("LDY", rt.opArg(["#"], 1));
rt.location("src/muts.a", 3325);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 2)));
rt.location("src/muts.a", 3326);
rt.opcode("LDA", rt.opArg(["#"], 6));
rt.location("src/muts.a", 3327);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3328);
rt.opcode("LDA", rt.opArg(["#"], 6));
rt.location("src/muts.a", 3329);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3330);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 5)));
rt.location("src/muts.a", 3331);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 6)));
rt.location("src/muts.a", 3332);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 7)));
rt.location("src/muts.a", 3333);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 8)));
rt.location("src/muts.a", 3334);
rt.macroCall("PUSH16", rt.symbol("acc2"));
rt.location("src/muts.a", 3335);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osgbpb")));
rt.location("src/muts.a", 3336);
rt.macroCall("POP16", rt.symbol("acc2"));
rt.location("src/muts.a", 3337);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 17)));
rt.location("src/muts.a", 3338);
rt.opcode("AND", rt.opArg(["#"], 3));
rt.location("src/muts.a", 3339);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3341);
rt.label(rt.symbol("empty_disc"));
rt.directive("BYTE", 0, 255, 255, 255, 255, 1, 105, 0);
rt.location("src/muts.a", 3342);
rt.directive("BYTE", 0, 0, 255, 255, 255, 255, 5, 99);
rt.location("src/muts.a", 3343);
rt.directive("BYTE", 0, 16, 42, 0, 16, 0, 0, 0);
rt.location("src/muts.a", 3344);
rt.directive("BYTE", 25, 255, 255, 3, 95, 0, 0, 42);
rt.location("src/muts.a", 3345);
rt.directive("BYTE", 0, 0, 255, 255, 255, 255, 4, 75);
rt.location("src/muts.a", 3346);
rt.directive("BYTE", 0, 0, 34, 0);
rt.location("src/muts.a", 3348);
rt.label(rt.symbol("-"));
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3349);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3351);
rt.label(rt.symbol("c_form"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("parse_tracks")));
rt.location("src/muts.a", 3352);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3353);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3354);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("parse_drive")));
rt.location("src/muts.a", 3355);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3356);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 3357);
rt.opcode("LDA", rt.opArg(["#"], 131));
rt.location("src/muts.a", 3358);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 3359);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3360);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3361);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3362);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3363);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3364);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3365);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3366);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("ram_warning")));
rt.location("src/muts.a", 3367);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3368);
rt.opcode("LDY", rt.opArg(["#"], 43));
rt.location("src/muts.a", 3369);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["abs,Y"], rt.symbol("empty_disc")));
rt.location("src/muts.a", 3370);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3371);
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3372);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3373);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("disc_block")));
rt.location("src/muts.a", 3374);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3375);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3376);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3377);
rt.opcode("LDY", rt.opArg(["#"], 9));
rt.location("src/muts.a", 3378);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3379);
rt.opcode("LDY", rt.opArg(["#"], 22));
rt.location("src/muts.a", 3380);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3381);
rt.opcode("LDY", rt.opArg(["#"], 33));
rt.location("src/muts.a", 3382);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3383);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3384);
rt.opcode("LDY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3385);
rt.opcode("LDA", rt.opArg(["#"], 127));
rt.location("src/muts.a", 3386);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osword")));
rt.location("src/muts.a", 3387);
rt.macroCall("MOV16Z", rt.symbol("acc1"));
rt.location("src/muts.a", 3388);
rt.label(rt.symbol("--"));
rt.opcode("LDY", rt.opArg(["#"], 3));
rt.location("src/muts.a", 3389);
rt.label(rt.symbol("-"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("wrap_sector")));
rt.location("src/muts.a", 3390);
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3391);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3392);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 3393);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 3394);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 3395);
rt.directive("TEXT", rt.f.neg(2), 0);
rt.location("src/muts.a", 3396);
rt.opcode("LDY", rt.opArg(["#"], 89));
rt.location("src/muts.a", 3397);
rt.opcode("LDX", rt.opArg(["#"], 10));
rt.location("src/muts.a", 3398);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["#"], 1));
rt.location("src/muts.a", 3399);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3400);
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3401);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3402);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3403);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("wrap_sector")));
rt.location("src/muts.a", 3404);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3405);
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3406);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3407);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3408);
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3409);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3410);
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3411);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 3412);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3413);
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3414);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3415);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3416);
rt.opcode("LDY", rt.opArg(["#"], 10));
rt.location("src/muts.a", 3417);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3418);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3419);
rt.opcode("ADC", rt.opArg(["#"], 50));
rt.location("src/muts.a", 3420);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3421);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3422);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3423);
rt.opcode("ADC", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3424);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3425);
rt.opcode("LDY", rt.opArg(["#"], 16));
rt.location("src/muts.a", 3426);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 3427);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3428);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3429);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3430);
rt.opcode("ADC", rt.opArg(["#"], 9));
rt.location("src/muts.a", 3431);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3432);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3433);
rt.opcode("ADC", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3434);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3435);
rt.opcode("LDA", rt.opArg(["#"], 127));
rt.location("src/muts.a", 3436);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osword")));
rt.location("src/muts.a", 3437);
rt.opcode("LDY", rt.opArg(["#"], 21));
rt.location("src/muts.a", 3438);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3439);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3440);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 3441);
// "Format error"

rt.location("src/muts.a", 3442);
rt.directive("TEXT", 178, "Format error", 0);
rt.location("src/muts.a", 3443);
rt.label(rt.symbol("+"));
rt.opcode("LDY", rt.opArg(["#"], 29));
rt.location("src/muts.a", 3444);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 3445);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3446);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3447);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3448);
rt.opcode("ADC", rt.opArg(["#"], 22));
rt.location("src/muts.a", 3449);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3450);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3451);
rt.opcode("ADC", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3452);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3453);
rt.opcode("LDA", rt.opArg(["#"], 127));
rt.location("src/muts.a", 3454);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osword")));
rt.location("src/muts.a", 3455);
rt.opcode("LDY", rt.opArg(["#"], 32));
rt.location("src/muts.a", 3456);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3457);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3458);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 3459);
// "Verify error"

rt.location("src/muts.a", 3460);
rt.directive("TEXT", 179, "Verify error", 0);
rt.location("src/muts.a", 3461);
rt.label(rt.symbol("+"));
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 3462);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc1")));
rt.location("src/muts.a", 3463);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3464);
rt.opcode("BCS", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3465);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("--")));
rt.location("src/muts.a", 3467);
rt.label(rt.symbol("+"));
rt.opcode("LDY", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3468);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3469);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3470);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3471);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 3472);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3473);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3474);
rt.label(rt.symbol("-"));
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3475);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3476);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3477);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 3478);
rt.label(rt.symbol("-"));
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3479);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3480);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3481);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3482);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3483);
rt.opcode("ASL");
rt.location("src/muts.a", 3484);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3485);
rt.opcode("ASL");
rt.location("src/muts.a", 3486);
rt.opcode("ROL", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3487);
rt.opcode("ASL");
rt.location("src/muts.a", 3488);
rt.opcode("ROL", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3489);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3490);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3491);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3492);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3493);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3494);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3495);
rt.label(rt.symbol("+"));
rt.opcode("LDY", rt.opArg(["#"], 7));
rt.location("src/muts.a", 3496);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3497);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3498);
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3499);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3500);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3501);
rt.opcode("LDY", rt.opArg(["#"], 34));
rt.location("src/muts.a", 3502);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3503);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3504);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3505);
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 3506);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3507);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3508);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3509);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3510);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3511);
rt.opcode("ADC", rt.opArg(["#"], 33));
rt.location("src/muts.a", 3512);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3513);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3514);
rt.opcode("ADC", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3515);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3516);
rt.opcode("LDA", rt.opArg(["#"], 127));
rt.location("src/muts.a", 3517);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("osword")));
rt.location("src/muts.a", 3519);
rt.label(rt.symbol("disc_block"));
rt.opcode("LDA", rt.opArg(["#"], 130));
rt.location("src/muts.a", 3520);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osbyte")));
rt.location("src/muts.a", 3521);
rt.macroCall("STXY", rt.symbol("ptr0"));
rt.location("src/muts.a", 3522);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3523);
rt.label(rt.symbol("-"));
rt.opcode("LDY", rt.opArg(["abs,X", "zpg,X"], rt.symbol("disc_offsets")));
rt.location("src/muts.a", 3524);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3525);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3526);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3527);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 3528);
rt.opcode("STA", rt.opArg(["(zpg),Y"], rt.symbol("acc0")));
rt.location("src/muts.a", 3529);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3530);
rt.opcode(
  "CPX",
  rt.opArg(
    ["#"],
    rt.f.sub(rt.symbol("disc_offsets_end"), rt.symbol("disc_offsets"))
  )
);
rt.location("src/muts.a", 3531);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3532);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3534);
rt.label(rt.symbol("disc_offsets"));
rt.directive("BYTE", 3, 12, 25, 36);
rt.location("src/muts.a", 3535);
rt.label(rt.symbol("disc_offsets_end"));

rt.location("src/muts.a", 3537);
rt.label(rt.symbol("wrap_sector"));
rt.opcode("LDX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc1"), 1)));
rt.location("src/muts.a", 3538);
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3539);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3540);
rt.opcode("LDX", rt.opArg(["#"], 9));
rt.location("src/muts.a", 3541);
rt.label(rt.symbol("+"));
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3542);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc1"), 1)));
rt.location("src/muts.a", 3543);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3545);
rt.label(rt.symbol("parse_track_drive"));
rt.opcode("LDA", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3546);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3547);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3548);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_byte")));
rt.location("src/muts.a", 3549);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3550);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("skip_comma")));
rt.location("src/muts.a", 3551);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("parse_drive")));
rt.location("src/muts.a", 3552);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3553);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 3554);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("acc2")));
rt.location("src/muts.a", 3555);
rt.opcode("LDX", rt.opArg(["#"], 42));
rt.location("src/muts.a", 3556);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3558);
rt.label(rt.symbol("c_get"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("parse_track_drive")));
rt.location("src/muts.a", 3559);
rt.opcode("LDY", rt.opArg(["#"], 83));
rt.location("src/muts.a", 3560);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3561);
rt.label(rt.symbol("c_put"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("parse_track_drive")));
rt.location("src/muts.a", 3562);
rt.opcode("LDY", rt.opArg(["#"], 75));
rt.location("src/muts.a", 3563);
rt.label(rt.symbol("+"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("get_put_parms")));
rt.location("src/muts.a", 3564);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("osword")));
rt.location("src/muts.a", 3565);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("prstr")));
rt.location("src/muts.a", 3566);
rt.directive(
  "TEXT",
  "I/O",
  rt.f.neg(1),
  "result",
  rt.f.neg(1),
  "=",
  rt.f.neg(1),
  0
);
rt.location("src/muts.a", 3568);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("stack"), 10)));
rt.location("src/muts.a", 3569);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("acc0")));
rt.location("src/muts.a", 3570);
rt.opcode("STY", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc0"), 1)));
rt.location("src/muts.a", 3571);
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3572);
rt.opcode("LDA", rt.opArg(["#"], 10));
rt.location("src/muts.a", 3573);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("radix_out")));
rt.location("src/muts.a", 3574);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 3576);
rt.label(rt.symbol("c_mode"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval_byte")));
rt.location("src/muts.a", 3577);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3578);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 3579);
rt.opcode("CPX", rt.opArg(["#"], 8));
rt.location("src/muts.a", 3580);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3581);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("throw")));
rt.location("src/muts.a", 3582);
rt.directive("TEXT", 25, "Bad MODE", 0);
rt.location("src/muts.a", 3583);
rt.label(rt.symbol("+"));
rt.opcode("LDA", rt.opArg(["#"], 22));
rt.location("src/muts.a", 3584);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3585);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3586);
rt.opcode("JMP", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3588);
rt.label(rt.symbol("c_vdu"));
rt.opcode("LDX", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3589);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3590);
rt.opcode("INX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3591);
rt.opcode("STX", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 3592);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("parse_bytes")));
rt.location("src/muts.a", 3593);
rt.label(rt.symbol("-"));
rt.opcode("DEX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3594);
rt.opcode("BMI", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3595);
rt.opcode("LDA", rt.opArg(["abs,Y"], rt.symbol("stack")));
rt.location("src/muts.a", 3596);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3597);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3598);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3599);
rt.label(rt.symbol("+"));
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3601);
rt.label(rt.symbol("c_same"));
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 3602);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("acc0_to_acc2")));
rt.location("src/muts.a", 3603);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 3604);
rt.macroCall("MOV16", rt.symbol("acc3"), rt.symbol("acc0"));
rt.location("src/muts.a", 3605);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("eval")));
rt.location("src/muts.a", 3606);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("check_eol")));
rt.location("src/muts.a", 3607);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("acc3")));
rt.location("src/muts.a", 3608);
rt.opcode("CMP", rt.opArg(["(zpg),Y"], rt.symbol("acc2")));
rt.location("src/muts.a", 3609);
rt.opcode("BEQ", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3610);
rt.opcode("LDX", rt.opArg(["#"], rt.symbol("acc2")));
rt.location("src/muts.a", 3611);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("pr_membyte")));
rt.location("src/muts.a", 3612);
rt.opcode("LDX", rt.opArg(["#"], rt.symbol("acc3")));
rt.location("src/muts.a", 3613);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("pr_membyte")));
rt.location("src/muts.a", 3614);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("newline")));
rt.location("src/muts.a", 3615);
rt.label(rt.symbol("+"));
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3616);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3617);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc3"), 1)));
rt.location("src/muts.a", 3618);
rt.opcode("INC", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("acc2"), 1)));
rt.location("src/muts.a", 3619);
rt.label(rt.symbol("+"));
rt.macroCall("DEC16", rt.symbol("acc0"));
rt.location("src/muts.a", 3620);
rt.macroCall("CMZ16", rt.symbol("acc0"));
rt.location("src/muts.a", 3621);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3622);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3624);
rt.label(rt.symbol("pr_membyte"));
rt.opcode("LDA", rt.opArg(["#"], rt.chars("(")));
rt.location("src/muts.a", 3625);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3626);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3627);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3628);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3629);
rt.opcode("ADC", rt.opArg(["abs,X", "zpg,X"], 0));
rt.location("src/muts.a", 3630);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3631);
rt.opcode("LDA", rt.opArg(["abs,X", "zpg,X"], 1));
rt.location("src/muts.a", 3632);
rt.opcode("ADC", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3633);
rt.opcode("STA", rt.opArg(["abs", "zpg"], rt.f.add(rt.symbol("ptr0"), 1)));
rt.location("src/muts.a", 3634);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 3635);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3636);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 3637);
rt.opcode("LDA", rt.opArg(["#"], rt.chars(")")));
rt.location("src/muts.a", 3638);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3639);
rt.opcode("LDA", rt.opArg(["#"], rt.chars("=")));
rt.location("src/muts.a", 3640);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3641);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3642);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], rt.symbol("ptr0")));
rt.location("src/muts.a", 3643);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte_space")));
rt.location("src/muts.a", 3644);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3645);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3646);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3648);
rt.label(rt.symbol("pr_sym16"));
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3649);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3650);
rt.opcode("TXA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3651);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3652);
rt.macroCall("PUSH16", 0);
rt.location("src/muts.a", 3653);
rt.macroCall("PUSH16", 2);
rt.location("src/muts.a", 3654);
rt.macroCall("MOV16I", 0, rt.symbol("symtab"));
rt.location("src/muts.a", 3655);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 3656);
rt.opcode("STA", rt.opArg(["abs", "zpg"], 2));
rt.location("src/muts.a", 3657);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("read_rom")));
rt.location("src/muts.a", 3658);
rt.opcode("STA", rt.opArg(["abs", "zpg"], 3));
rt.location("src/muts.a", 3659);
rt.opcode("LDY", rt.opArg(["#"], 0));
rt.location("src/muts.a", 3660);
rt.label(rt.symbol("--"));
rt.opcode("LDA", rt.opArg(["(zpg),Y"], 0));
rt.location("src/muts.a", 3661);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], 2));
rt.location("src/muts.a", 3662);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3663);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3664);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], 0));
rt.location("src/muts.a", 3665);
rt.opcode("CMP", rt.opArg(["abs", "zpg"], 3));
rt.location("src/muts.a", 3666);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("pr_sym_copy")));
rt.location("src/muts.a", 3667);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3668);
rt.label(rt.symbol("-"));
rt.opcode("LDA", rt.opArg(["(zpg),Y"], 0));
rt.location("src/muts.a", 3669);
rt.opcode("PHA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3670);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3671);
rt.opcode("AND", rt.opArg(["#"], 127));
rt.location("src/muts.a", 3672);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3673);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3674);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("-")));
rt.location("src/muts.a", 3675);
rt.opcode("BMI", rt.opArg(["rel"], rt.symbol("++")));
rt.location("src/muts.a", 3676);
rt.label(rt.symbol("+"));
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3677);
rt.label(rt.symbol("pr_sym_copy"));
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3678);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], 0));
rt.location("src/muts.a", 3679);
rt.opcode("BPL", rt.opArg(["rel"], rt.symbol("pr_sym_copy")));
rt.location("src/muts.a", 3680);
rt.opcode("INY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3681);
rt.opcode("TYA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3682);
rt.opcode("CLC", rt.opArg(["impl"]));
rt.location("src/muts.a", 3683);
rt.opcode("ADC", rt.opArg(["abs", "zpg"], 0));
rt.location("src/muts.a", 3684);
rt.opcode("STA", rt.opArg(["abs", "zpg"], 0));
rt.location("src/muts.a", 3685);
rt.opcode("BCC", rt.opArg(["rel"], rt.symbol("+")));
rt.location("src/muts.a", 3686);
rt.opcode("INC", rt.opArg(["abs", "zpg"], 1));
rt.location("src/muts.a", 3687);
rt.label(rt.symbol("+"));
rt.opcode("LDY", rt.opArg(["#"], 1));
rt.location("src/muts.a", 3688);
rt.opcode("LDA", rt.opArg(["(zpg),Y"], 0));
rt.location("src/muts.a", 3689);
rt.opcode("DEY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3690);
rt.opcode("ORA", rt.opArg(["(zpg),Y"], 0));
rt.location("src/muts.a", 3691);
rt.opcode("BNE", rt.opArg(["rel"], rt.symbol("--")));
rt.location("src/muts.a", 3692);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], rt.symbol("hex_pfx")));
rt.location("src/muts.a", 3693);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("oswrch")));
rt.location("src/muts.a", 3694);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], 3));
rt.location("src/muts.a", 3695);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 3696);
rt.opcode("LDA", rt.opArg(["abs", "zpg"], 2));
rt.location("src/muts.a", 3697);
rt.opcode("JSR", rt.opArg(["abs"], rt.symbol("hexbyte")));
rt.location("src/muts.a", 3698);
rt.label(rt.symbol("++"));
rt.macroCall("POP16", 2);
rt.location("src/muts.a", 3699);
rt.macroCall("POP16", 0);
rt.location("src/muts.a", 3700);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3701);
rt.opcode("TAX", rt.opArg(["impl"]));
rt.location("src/muts.a", 3702);
rt.opcode("PLA", rt.opArg(["impl"]));
rt.location("src/muts.a", 3703);
rt.opcode("TAY", rt.opArg(["impl"]));
rt.location("src/muts.a", 3704);
rt.opcode("RTS", rt.opArg(["impl"]));
rt.location("src/muts.a", 3706);
rt.label(rt.symbol("symtab"));
rt.directive("WORD", rt.symbol("oswrch"));
rt.location("src/muts.a", 3707);
rt.directive("TEXT", "OSWRC", rt.f.add(rt.chars("H"), 128));
rt.location("src/muts.a", 3708);
rt.directive("WORD", rt.symbol("osrdch"));
rt.location("src/muts.a", 3709);
rt.directive("TEXT", "OSRDC", rt.f.add(rt.chars("H"), 128));
rt.location("src/muts.a", 3710);
rt.directive("WORD", rt.symbol("osnewl"));
rt.location("src/muts.a", 3711);
rt.directive("TEXT", "OSNEW", rt.f.add(rt.chars("L"), 128));
rt.location("src/muts.a", 3712);
rt.directive("WORD", rt.symbol("osasci"));
rt.location("src/muts.a", 3713);
rt.directive("TEXT", "OSASC", rt.f.add(rt.chars("I"), 128));
rt.location("src/muts.a", 3714);
rt.directive("WORD", 65474);
rt.location("src/muts.a", 3715);
rt.directive("TEXT", "GSINI", rt.f.add(rt.chars("T"), 128));
rt.location("src/muts.a", 3716);
rt.directive("WORD", 65477);
rt.location("src/muts.a", 3717);
rt.directive("TEXT", "GSREA", rt.f.add(rt.chars("D"), 128));
rt.location("src/muts.a", 3718);
rt.directive("WORD", 65465);
rt.location("src/muts.a", 3719);
rt.directive("TEXT", "OSRDR", rt.f.add(rt.chars("M"), 128));
rt.location("src/muts.a", 3720);
rt.directive("WORD", 65471);
rt.location("src/muts.a", 3721);
rt.directive("TEXT", "OSEVE", rt.f.add(rt.chars("N"), 128));
rt.location("src/muts.a", 3722);
rt.directive("WORD", rt.symbol("oscli"));
rt.location("src/muts.a", 3723);
rt.directive("TEXT", "OSCL", rt.f.add(rt.chars("I"), 128));
rt.location("src/muts.a", 3724);
rt.directive("WORD", rt.symbol("osbyte"));
rt.location("src/muts.a", 3725);
rt.directive("TEXT", "OSBYT", rt.f.add(rt.chars("E"), 128));
rt.location("src/muts.a", 3726);
rt.directive("WORD", rt.symbol("osword"));
rt.location("src/muts.a", 3727);
rt.directive("TEXT", "OSWOR", rt.f.add(rt.chars("D"), 128));
rt.location("src/muts.a", 3728);
rt.directive("WORD", rt.symbol("osfind"));
rt.location("src/muts.a", 3729);
rt.directive("TEXT", "OSFIN", rt.f.add(rt.chars("D"), 128));
rt.location("src/muts.a", 3730);
rt.directive("WORD", rt.symbol("osgbpb"));
rt.location("src/muts.a", 3731);
rt.directive("TEXT", "OSGBP", rt.f.add(rt.chars("B"), 128));
rt.location("src/muts.a", 3732);
rt.directive("WORD", rt.symbol("osbput"));
rt.location("src/muts.a", 3733);
rt.directive("TEXT", "OSBPU", rt.f.add(rt.chars("T"), 128));
rt.location("src/muts.a", 3734);
rt.directive("WORD", rt.symbol("osbget"));
rt.location("src/muts.a", 3735);
rt.directive("TEXT", "OSBGE", rt.f.add(rt.chars("T"), 128));
rt.location("src/muts.a", 3736);
rt.directive("WORD", rt.symbol("osargs"));
rt.location("src/muts.a", 3737);
rt.directive("TEXT", "OSARG", rt.f.add(rt.chars("S"), 128));
rt.location("src/muts.a", 3738);
rt.directive("WORD", rt.symbol("osfile"));
rt.location("src/muts.a", 3739);
rt.directive("TEXT", "OSFIL", rt.f.add(rt.chars("E"), 128));
rt.location("src/muts.a", 3740);
rt.directive("WORD", rt.symbol("brkv"));
rt.location("src/muts.a", 3741);
rt.directive("TEXT", "brk", rt.f.add(rt.chars("v"), 128));
rt.location("src/muts.a", 3742);
rt.directive("WORD", 515);
rt.location("src/muts.a", 3743);
rt.directive("TEXT", "brkv+", rt.f.add(rt.chars("1"), 128));
rt.location("src/muts.a", 3744);
rt.directive("WORD", rt.symbol("wrchv"));
rt.location("src/muts.a", 3745);
rt.directive("TEXT", "wrch", rt.f.add(rt.chars("v"), 128));
rt.location("src/muts.a", 3746);
rt.directive("WORD", rt.f.add(rt.symbol("wrchv"), 1));
rt.location("src/muts.a", 3747);
rt.directive("TEXT", "wrchv+", rt.f.add(rt.chars("1"), 128));
rt.location("src/muts.a", 3748);
rt.directive("WORD", rt.symbol("rdchv"));
rt.location("src/muts.a", 3749);
rt.directive("TEXT", "rdch", rt.f.add(rt.chars("v"), 128));
rt.location("src/muts.a", 3750);
rt.directive("WORD", rt.f.add(rt.symbol("rdchv"), 1));
rt.location("src/muts.a", 3751);
rt.directive("TEXT", "rdchv+", rt.f.add(rt.chars("1"), 128));
rt.location("src/muts.a", 3752);
rt.directive("WORD", rt.symbol("stack"));
rt.location("src/muts.a", 3753);
rt.directive("TEXT", "stac", rt.f.add(rt.chars("k"), 128));
rt.location("src/muts.a", 3754);
rt.directive("WORD", rt.symbol("rom_language"));
rt.location("src/muts.a", 3755);
rt.directive("TEXT", "lan", rt.f.add(rt.chars("g"), 128));
rt.location("src/muts.a", 3756);
rt.directive("WORD", rt.symbol("rom_service"));
rt.location("src/muts.a", 3757);
rt.directive("TEXT", "serv", rt.f.add(rt.chars("e"), 128));
rt.location("src/muts.a", 3758);
rt.directive("WORD", 0);
rt.location("src/muts.a", 3760);
rt.label(rt.symbol("credits"));
rt.directive(
  "TEXT",
  "(C) Andrew Armstrong 1984. Thanks to Nigel, Joe and all at HCCS."
);
rt.location("src/muts.a", 3761);
rt.directive("TEXT", "Version 1.60 12.2.1984");
rt.location("src/muts.a", 3763);
// Pad with spaces to next 8k boundary

rt.location("src/muts.a", 3764);
rt.directive("ALIGN", 8191, 0, rt.chars(" "));
